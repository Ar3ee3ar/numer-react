{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Desktop\\\\numer-react\\\\src\\\\pages\\\\Root of Equation\\\\Newton_Raphson.jsx\";\nimport React from 'react';\nimport { Row, Col, Input, Card, Button, Table } from 'antd';\nimport { func, funcDiff } from '../../group_library/lib_use.js';\nimport Graph from '../../components/Graph';\nimport 'antd/dist/antd.css';\nimport '../../style/screen.css';\nimport { compile, derivative } from 'mathjs';\nconst InputStyle = {\n  background: \"white\",\n  color: \"#001529\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar dataInTable = [];\nconst columns = [{\n  title: \"Iteration\",\n  dataIndex: \"iteration\",\n  key: \"iteration\"\n}, {\n  title: \"X\",\n  dataIndex: \"x\",\n  key: \"x\"\n}, {\n  title: \"Error\",\n  key: \"error\",\n  dataIndex: \"error\"\n}];\n\nclass Newton_Raphson extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resetField = e => {\n      this.setState({\n        fx: '',\n        disabled: false,\n        showGraph: false\n      });\n    };\n\n    this.state = {\n      fx: \"\",\n      X: 0.0,\n      showOutputCard: false,\n      showGraph: false,\n      moveLeft: false,\n      showInputCard: true,\n      disabled: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.newton_Raphson = this.newton_Raphson.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  newton_Raphson(X) {\n    var error = parseFloat(999.000000);\n    var Xnew = 0;\n    var count = 0;\n    var data = [];\n    data['x'] = [];\n    data['error'] = []; //console.log(derivative('7-x^2', 'x').evaluate({x: 4}))\n\n    var use_fx = this.state.fx.split(\"=\");\n\n    do {\n      Xnew = X - func(this.state.fx, X) / derivative(use_fx[1], 'x').evaluate({\n        x: X\n      });\n      error = Math.abs((Xnew - X) / Xnew); //   console.log(Xnew)\n      //   console.log(error)\n\n      console.log(X + \" - (\" + func(this.state.fx, X) + \"/\" + funcDiff(X) + \")\");\n      data['x'][count] = X.toFixed(8);\n      data['error'][count] = error.toFixed(8);\n      count++;\n      X = Xnew; //console.log(Xm.toFixed(6));\n    } while (error > 0.000001); //console.log((Xm.toString()).substring(0,8)) //change Float to String make number don't round up\n    //console.log(\"answer: \"+Xm)\n\n\n    this.createTable(data['x'], data['error']);\n    this.setState({\n      showOutputCard: true,\n      showGraph: true,\n      showInputCard: false,\n      disabled: true\n    });\n  }\n\n  createTable(x, error) {\n    dataInTable = [];\n\n    for (var i = 0; i < x.length; i++) {\n      dataInTable.push({\n        iteration: i + 1,\n        x: x[i],\n        error: error[i]\n      });\n    }\n  }\n\n  render() {\n    let {\n      fx,\n      X\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"calBody\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      title: /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"white\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 38\n        }\n      }, \"Newton Raphson\"),\n      bordered: true,\n      style: {\n        background: \"#001529\",\n        borderRadius: \"15px\",\n        color: \"#FFFFFFFF\"\n      },\n      onChange: this.handleChange,\n      id: \"inputCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 29\n      }\n    }, \"f(x)\"), /*#__PURE__*/React.createElement(Input, {\n      size: \"large\",\n      name: \"fx\",\n      value: this.state.fx,\n      style: InputStyle,\n      disabled: this.state.disabled ? \"disabled\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 66\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 29\n      }\n    }, \"X\"), /*#__PURE__*/React.createElement(Input, {\n      size: \"large\",\n      name: \"X\",\n      style: InputStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 63\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 120\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 126\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      id: \"submit_button\",\n      onClick: () => this.newton_Raphson(parseFloat(X)),\n      style: {\n        background: \"white\",\n        color: \"#001529\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 29\n      }\n    }, \"Submit\"), this.state.disabled && /*#__PURE__*/React.createElement(Button, {\n      onClick: this.resetField,\n      style: {\n        float: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 51\n      }\n    }, \"Reset\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    }, this.state.showGraph && /*#__PURE__*/React.createElement(Graph, {\n      fx: fx,\n      title: \"Newton Raphson Method\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 50\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, this.state.showOutputCard && /*#__PURE__*/React.createElement(Card, {\n      title: /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"white\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 38\n        }\n      }, \"Output\"),\n      bordered: true,\n      style: {\n        width: \"100%\",\n        background: \"#001529\",\n        color: \"#FFFFFFFF\"\n      },\n      id: \"outputCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      columns: columns,\n      dataSource: dataInTable,\n      bodyStyle: {\n        fontWeight: \"bold\",\n        fontSize: \"18px\",\n        color: \"black\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 29\n      }\n    }))));\n  }\n\n}\n\nexport default Newton_Raphson;","map":{"version":3,"sources":["C:/Users/acer/Desktop/numer-react/src/pages/Root of Equation/Newton_Raphson.jsx"],"names":["React","Row","Col","Input","Card","Button","Table","func","funcDiff","Graph","compile","derivative","InputStyle","background","color","fontWeight","fontSize","dataInTable","columns","title","dataIndex","key","Newton_Raphson","Component","constructor","props","resetField","e","setState","fx","disabled","showGraph","state","X","showOutputCard","moveLeft","showInputCard","handleChange","bind","newton_Raphson","event","target","name","value","error","parseFloat","Xnew","count","data","use_fx","split","evaluate","x","Math","abs","console","log","toFixed","createTable","i","length","push","iteration","render","borderRadius","float","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col,Input ,Card,Button,Table} from 'antd';\r\nimport {func,funcDiff} from '../../group_library/lib_use.js';\r\nimport Graph from '../../components/Graph'\r\nimport 'antd/dist/antd.css';\r\nimport '../../style/screen.css'\r\nimport {compile, derivative} from 'mathjs'\r\n\r\n\r\nconst InputStyle = {\r\n    background: \"white\",\r\n    color: \"#001529\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"24px\",\r\n\r\n};\r\nvar dataInTable = []\r\nconst columns = [\r\n    {\r\n        title: \"Iteration\",\r\n        dataIndex: \"iteration\",\r\n        key: \"iteration\"\r\n    },\r\n    {\r\n        title: \"X\",\r\n        dataIndex: \"x\",\r\n        key: \"x\"\r\n    },\r\n    {\r\n        title: \"Error\",\r\n        key: \"error\",\r\n        dataIndex: \"error\"\r\n    }\r\n];\r\n\r\nclass Newton_Raphson extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n          fx : \"\",\r\n          X : 0.0,\r\n          showOutputCard: false,\r\n            showGraph: false,\r\n            moveLeft: false,\r\n            showInputCard: true,\r\n             disabled: false \r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.newton_Raphson = this.newton_Raphson.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n      this.setState({[event.target.name]: event.target.value});\r\n    }\r\n\r\n\r\n    newton_Raphson(X){\r\n      var error=parseFloat(999.000000);\r\n      var Xnew =0;\r\n      var count = 0;\r\n        var data = []\r\n        data['x'] = []\r\n        data['error'] = []\r\n        //console.log(derivative('7-x^2', 'x').evaluate({x: 4}))\r\n        var use_fx = this.state.fx.split(\"=\")\r\n      do{\r\n          Xnew = X - (func(this.state.fx,X)/derivative(use_fx[1], 'x').evaluate({x: X}))\r\n          error = Math.abs((Xnew-X)/Xnew);\r\n        //   console.log(Xnew)\r\n        //   console.log(error)\r\n        console.log( X+\" - (\"+func(this.state.fx,X)+\"/\"+funcDiff(X)+\")\")\r\n            data['x'][count] = X.toFixed(8);\r\n            data['error'][count] = error.toFixed(8);\r\n            count++;\r\n            X=Xnew\r\n          //console.log(Xm.toFixed(6));\r\n        }while(error>0.000001)\r\n        //console.log((Xm.toString()).substring(0,8)) //change Float to String make number don't round up\r\n        //console.log(\"answer: \"+Xm)\r\n        this.createTable( data['x'], data['error']);\r\n        this.setState({\r\n            showOutputCard: true,\r\n            showGraph: true,\r\n            showInputCard : false,\r\n            disabled: true\r\n        })\r\n    }\r\n\r\n    createTable(x, error) {\r\n        dataInTable = []\r\n        for (var i = 0; i < x.length; i++) {\r\n            dataInTable.push({\r\n                iteration: i + 1,\r\n                x: x[i],\r\n                error: error[i]\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    resetField =(e)=>{\r\n            this.setState({\r\n                fx : '',\r\n                disabled: false,\r\n                showGraph: false\r\n            });\r\n        }\r\n    \r\n    render() {\r\n        let { fx, X } = this.state;\r\n        return (\r\n            <div className=\"calBody\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        {<Card\r\n                            title = {<span style={{color:\"white\"}}>Newton Raphson</span>}\r\n                            bordered={true}\r\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\r\n                            onChange={this.handleChange}\r\n                            id=\"inputCard\"\r\n                        >\r\n                            <h2 style={{color:\"white\"}}>f(x)</h2><Input size=\"large\" name=\"fx\" value= {this.state.fx} style={InputStyle} disabled = {(this.state.disabled)? \"disabled\" : \"\"}></Input>\r\n                            <h2 style={{color:\"white\"}}>X</h2><Input size=\"large\" name=\"X\" style={InputStyle} ></Input><br /><br />\r\n                            <Button id=\"submit_button\" onClick={\r\n                                () => this.newton_Raphson(parseFloat(X))\r\n                            }\r\n                                style={{ background: \"white\", color: \"#001529\" }}>Submit</Button>\r\n                            {this.state.disabled&&<Button onClick={this.resetField} style={{float:'right'}}>Reset</Button>}\r\n                        </Card>}\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        {this.state.showGraph && <Graph fx={fx} title=\"Newton Raphson Method\" />}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {this.state.showOutputCard &&\r\n                        <Card\r\n                            title = {<span style={{color:\"white\"}}>Output</span>}\r\n                            bordered={true}\r\n                            style={{ width: \"100%\", background: \"#001529\", color: \"#FFFFFFFF\" }}\r\n                            id=\"outputCard\"\r\n                        >\r\n                            <Table columns={columns} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}></Table>\r\n                        </Card>\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Newton_Raphson;\r\n"]},"metadata":{},"sourceType":"module"}