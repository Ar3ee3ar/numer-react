{"version":3,"sources":["pages/Linear Algebra/Gauss.js","pages/Linear Algebra/Inverse.js","pages/Linear Algebra/LU.js","pages/Linear Algebra/Jacobi.js","pages/Linear Algebra/Seidel.js","pages/Linear Algebra/Gradient.js","pages/Interpolation/Newton.js","pages/Interpolation/Lagrange.js","pages/Interpolation/Spline.js","pages/Regression/Linear.js","pages/Regression/Polynomial.js","pages/Regression/MultipleLinear.js","group_library/lib_use.js","components/Graph.js","api/index.js","pages/Root of Equation/Bisection.jsx","pages/Root of Equation/Graphical.jsx","pages/Root of Equation/False_position.jsx","pages/Root of Equation/One_point_iteration.jsx","pages/Root of Equation/Newton_Raphson.jsx","pages/Root of Equation/Secant.jsx","pages/Linear Algebra/Cramer.js","pages/Linear Algebra/Jordan.js","pages/Linear Algebra/Cholesky.js","App.js","index.js"],"names":["X","answer","decompose","x","epsilon","output","y","tableTag","interpolatePoint","tempTag","fx","fX_target","regressionMatrixX","regressionMatrixY","matrixA","matrixB","X_target","X_tValue","func","require","expr","compile","scope","parseFloat","evaluate","funcDiff","derivative","Graph","this","props","title","data","range","toArray","map","type","marker","color","layout","Component","api","axios","create","baseURL","apis","getAllExam","get","getExamByMethod","name","InputStyle","background","fontWeight","fontSize","dataInTable","columns","dataIndex","key","Bisection","resetField","e","setState","disabled","showGraph","getExam","then","db","Xl","xl","Xr","xr","state","showOutputCard","moveLeft","showInputCard","handleChange","bind","bisection","event","target","value","increaseFunction","error","Xm","count","Math","abs","toFixed","createTable","i","length","push","iteration","className","style","bordered","borderRadius","onChange","id","size","onClick","float","marginLeft","width","dataSource","bodyStyle","React","Graphical","start","end","graphical","parseInt","False_position","false_position","X1","console","log","One_point_iteration","Xpre","one_point_iteration","Newton_Raphson","newton_Raphson","Xnew","use_fx","split","Secant","X0","secant","x0","x1","A","B","Cramer","row","column","a_value","b_value","CallExam","showDimentionForm","showMatrixForm","cramer","initMatrix","counter","transformMatrix","JSON","parse","stringify","j","round","det","height","backgroundColor","marginInlineEnd","marginBlockEnd","placeholder","document","getElementById","createMatrix","Gauss","CanType","gauss","n","tempRow","tempColumn","k","factor","Array","sum","Jordan","jordan","Inverse","inverse","inv","multiply","Number","isInteger","printFraction","fraction","format","LU","Lu","lusolve","backgrounf","Cholesky","cholesky","temp","matrixL","sqrt","L","matrixX","Jacobi","initial","jacobi","xold","xnew","appendTable","tag","initialSchema","overflowX","border","Seidel","seidel","arrayOutput","Gradient","answerOutput","conjugate_gradient","dimention","tempMatrix","positive_definite","R","subtract","D","λ","transpose","add","join","α","lambda","Newton","nPoints","all_point","x_target","inter_point","array_x_value","array_x","array_y_value","array_y","point_value","point","showInputForm","showTableInput","newton_difference","no","C","findX","initialValue","pagination","overflowY","minWidth","maxHeight","createTableInput","createInterpolatePointInput","Lagrange","lagrange","index","numerate","denominate","Spline","spline","xs","ys","ks","getNaturalKs","t","a","b","q","zerosMat","solve","m","i_max","vali","NEGATIVE_INFINITY","swapRows","v","r","c","l","p","Linear","justifyContent","matrixY","exponent","summation","summationOfTwo","pow","linear","Polynomial","squeeze","polynomial","MultipleLinear","array_xt_value","x_multi_target","array_x_multi","x_point","createTableX_target","multipleLinear","SubMenu","Menu","Header","Layout","Content","Sider","Routes","showDrawer","visible","onClose","placement","position","zIndex","padding","BarsOutlined","closable","footer","mode","defaultSelectedKeys","defaultOpenKeys","Item","to","breakpoint","collapsedWidth","borderRight","marginTop","margin","minHeight","exact","path","component","NewtonInterpolate","ReactDOM","render","StrictMode","App"],"mappings":"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","file":"static/js/main.8ca4fe71.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Card, Input, Button } from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\n\nvar A = [], B = [], X, matrixA = [], matrixB = [], output = []\nclass Gauss extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            a_value : [],\n            b_value:[],\n            showDimentionForm: true,\n            showMatrixForm: false,\n            showOutputCard: false,\n            CanType: true\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.gauss = this.gauss.bind(this);\n\n    }\n\n    gauss(n) {\n        this.initMatrix()\n        if (A[0][0] === 0) { //pivoting\n            var tempRow = JSON.parse(JSON.stringify(A[0]));\n            var tempColumn = B[0];\n            A[0] = A[1];\n            A[1] = tempRow;\n            B[0] = B[1];\n            B[1] = tempColumn;\n        }\n        //Forward eliminated\n        for (var k = 0; k < n; k++) {\n            for (var i = k + 1; i < n; i++) {\n                var factor = A[i][k] / A[k][k];\n                for (var j = k; j < n; j++) {\n                    A[i][j] = A[i][j] - factor * A[k][j];\n                }\n                B[i] = B[i] - factor * B[k];\n            }\n        }\n        //Backward Substitution\n        X = new Array(n);\n        X[n - 1] = B[n - 1] / A[n - 1][n - 1]; //find Xn\n        for (i = n - 2; i >= 0; i--) { //find Xn-1 to X1\n            var sum = B[i];\n            for (j = i + 1; j < n; j++) {\n                sum = sum - A[i][j] * X[j];\n            }\n            X[i] = Math.round(sum / A[i][i]);\n        }\n        for (i = 0; i < n; i++) {\n            output.push(\"x\" + (i + 1) + \" = \" + X[i]);\n            output.push(<br />)\n        }\n\n        this.setState({\n            showOutputCard: true\n        });\n\n    }\n    createMatrix(row, column) {\n        console.log(this.state.CanType)\n        A = []\n        B = []\n        X = []\n        matrixA = []\n        matrixB = []\n        output = []\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\",\n                    backgroundColor: \"white\",\n                    marginInlineEnd: \"5%\",\n                    marginBlockEnd: \"5%\",\n                    color: \"black\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }}\n                    id={\"a\" + i + \"\" + j} key={\"a\" + i + \"\" + j} placeholder={(this.state.CanType)? (\"a\"+i+\"\"+j):this.state.a_value[i-1][j-1]}/>)\n            }\n            matrixA.push(<br />)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"b\" + i} key={\"b\" + i} placeholder={(this.state.CanType)? (\"b\"+i):this.state.b_value[i-1]} />)\n\n\n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n\n    }\n    initMatrix() {\n        for (var i = 0; i < this.state.row; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.column; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n        }\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"cholesky decomposition\").then(db=>{\n            this.setState({\n                row : db.data.data.row,\n                column : db.data.data.column,\n                a_value : db.data.data.A,\n                b_value : db.data.data.B,\n                CanType: false\n            }\n            )\n        })\n\n    }\n\n    render() {\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Gauss Elimination</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n\n\n                            {this.state.showDimentionForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Row</h2><Input size=\"large\" name=\"row\" value={this.state.row} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>Column</h2><Input size=\"large\" name=\"column\" value={this.state.column} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => this.createMatrix(this.state.row, this.state.column)\n                                    }\n                                        style={{ background: \"#4caf12\", color: \"white\" , float:\"right\"}}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n\n                            {this.state.showMatrixForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Matrix [A]</h2><br />{matrixA}\n                                    <h2 style={{color:\"white\"}}>Vector [B]<br /></h2>{matrixB}\n                                    \n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"#4caf12\", color: \"white\" ,float:\"right\"}}\n                                        onClick={() => this.gauss(this.state.row)}>\n                                        Submit\n                                    </Button>\n                                </div>\n                            }\n                        </Card>                        \n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={<p style={{ color:\"white\" }}>Output</p>}\n                                bordered={true}\n                                style={{ background: \"#001529\", color: \"#FFFFFFFF\" }}\n                                onChange={this.handleChange} id=\"answerCard\">\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{output}</p>\n                            </Card>\n                        }                        \n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Gauss;\n\n\n\n","import React, { Component } from 'react'\nimport { Card, Input, Button } from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport { inv, multiply, fraction, format } from 'mathjs';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\n\nvar A = [], B = [], matrixA = [], matrixB = [], output = [], answer\n\nclass Inverse extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            showDimentionForm: true,\n            showMatrixForm: false,\n            showOutputCard: false,\n            CallExam: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.inverse = this.inverse.bind(this);\n\n    }\n\n    inverse(n) {\n        this.initMatrix();\n        try {\n            A = inv(A);\n            answer = multiply(A,B)\n            console.log(A)\n            for (var i = 0; i < n; i++) {\n                for (var j = 0; j < n; j++) {\n                    if (!Number.isInteger(A[i][j])) {\n                        A[i][j] = this.printFraction(fraction(A[i][j]));\n                    }\n\n                }\n            }\n            for (i = 0; i < n; i++) {\n                for (j = 0; j < n; j++) {\n                    output.push(A[i][j]);\n                    output.push(\"  \");\n                }\n                output.push(<br />)\n            }\n\n        } catch (error) {\n            output.push(\"Matrix doesn't exist, Determinant is zero\")\n        }\n        this.setState({\n            showOutputCard: true\n        });\n    }\n\n    printFraction(value) {\n        return format(value, { fraction: 'ratio' })\n    }\n\n    createMatrix(row, column) {\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\",\n                    backgroundColor: \"white\",\n                    marginInlineEnd: \"5%\",\n                    marginBlockEnd: \"5%\",\n                    color: \"black\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }}\n                    id={\"a\" + i + \"\" + j} key={\"a\" + i + \"\" + j} placeholder={(this.state.CallExam)? this.state.a_value[i-1][j-1] : (\"a\"+i+\"\"+j)} />)\n            }\n            matrixA.push(<br />)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"b\" + i} key={\"b\" + i} placeholder={(this.state.CallExam)? this.state.b_value[i-1]:(\"b\"+i)} />)\n\n\n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n\n    }\n    initMatrix() {\n        for (var i = 0; i < this.state.row; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.column; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n        }\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"matrix inversion\").then(db=>{\n            this.setState({\n                row : db.data.data.row,\n                column : db.data.data.column,\n                a_value : db.data.data.A,\n                b_value : db.data.data.B,\n                CallExam : true\n            }\n            )\n        })\n\n    }\n\n    render() {\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Matrix Inversion</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n\n                            {this.state.showDimentionForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Row</h2><Input size=\"large\" name=\"row\" value={this.state.row} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>Column</h2><Input size=\"large\" name=\"column\" value={this.state.column} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => this.createMatrix(this.state.row, this.state.column)\n                                    }\n                                        style={{ background: \"#4caf12\", color: \"white\", float:\"right\" }}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n\n                            {this.state.showMatrixForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Matrix [A]</h2><br />{matrixA}\n                                    <h2 style={{color:\"white\"}}>Vector [B]<br /></h2>{matrixB}\n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"#4caf12\", color: \"white\" }}\n                                        onClick={() => this.inverse(this.state.row)}>\n                                        Submit\n                                </Button>\n                                </div>\n                            }\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ background: \"white\", color: \"#001529\" }}\n                                onChange={this.handleChange} id=\"answerCard\">\n                                {/*<p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>A<sup>-1</sup></p>\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{output}</p>*/}\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>X = {JSON.stringify(answer)}</p>\n                            </Card>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Inverse;\n\n\n\n","import React, { Component } from 'react'\nimport { Card, Input, Button } from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport { lusolve, format } from 'mathjs';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\n\nvar A = [], B = [], matrixA = [], matrixB = [], output = [], decompose;\nclass LU extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            a_value: [],\n            b_value: [],\n            showDimentionForm: true,\n            showMatrixForm: false,\n            showOutputCard: false,\n            CallExam: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.Lu = this.Lu.bind(this);\n\n    }\n\n    Lu() {\n        this.initMatrix();\n        decompose = lusolve(A, B)\n        for (var i = 0; i < decompose.length; i++) {\n            output.push(Math.round(decompose[i]));\n            output.push(<br />)\n        }\n        this.setState({\n            showOutputCard: true\n        });\n\n\n    }\n\n    printFraction(value) {\n        return format(value, { fraction: 'ratio' })\n    }\n\n    createMatrix(row, column) {\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\",\n                    backgroundColor: \"white\",\n                    marginInlineEnd: \"5%\",\n                    marginBlockEnd: \"5%\",\n                    color: \"black\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }}\n                    id={\"a\" + i + \"\" + j} key={\"a\" + i + \"\" + j} placeholder={(this.state.CallExam)?this.state.a_value[i-1][j-1]:\"a\" + i + \"\" + j} />)\n            }\n            matrixA.push(<br />)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"b\" + i} key={\"b\" + i} placeholder={(this.state.CallExam)?this.state.b_value[i-1]:\"b\" + i} />)\n\n\n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n\n    }\n    initMatrix() {\n        for (var i = 0; i < this.state.row; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.column; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n        }\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"LU decomposition\").then(db=>{\n            this.setState({\n                row : db.data.data.row,\n                column : db.data.data.column,\n                a_value : db.data.data.A,\n                b_value : db.data.data.B,\n                CallExam : true\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>LU Decomposition</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n\n\n                            {this.state.showDimentionForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Row</h2><Input size=\"large\" name=\"row\" value={this.state.row} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>Column</h2><Input size=\"large\" name=\"column\" value={this.state.column} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => this.createMatrix(this.state.row, this.state.column)\n                                    }\n                                        style={{ background: \"#4caf12\", color: \"white\",float:\"right\" }}>\n                                        Submit\n                                </Button>\n                                </div>\n                            }\n\n                            {this.state.showMatrixForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Matrix [A]</h2><br />{matrixA}\n                                    <h2 style={{color:\"white\"}}>Vector [B]<br /></h2>{matrixB}\n                                    \n                                <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"#4caf12\", color: \"white\"}}\n                                        onClick={() => this.Lu()}>\n                                        Submit\n                                </Button>\n                                </div>\n                            }\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ color: \"#001529\", backgrounf: \"#FFFFFFFF\" }}\n                                onChange={this.handleChange} id=\"answerCard\">\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{output}</p>\n                            </Card>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default LU;\n\n\n\n","import React, { Component } from 'react'\nimport {Card, Input, Button, Table} from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\n\n\nvar A = [], B = [], matrixA = [], matrixB = [], x , epsilon, dataInTable = [], count=1, matrixX = []\nvar columns = [\n    {\n      title: \"Iteration\",\n      dataIndex: \"iteration\",\n      key: \"iteration\"\n    }\n];\nclass Jacobi extends Component {\n    \n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            a_value: [],\n            b_value: [],\n            initial: [],\n            showDimentionForm : true,\n            showMatrixForm: false,\n            showOutputCard: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.jacobi = this.jacobi.bind(this);\n    \n    }\n\n  \n    jacobi(n) {\n        this.initMatrix();\n        var temp;\n        var xold;\n        epsilon = new Array(n);\n        do {\n            temp = [];\n            xold = JSON.parse(JSON.stringify(x));\n            for (var i=0 ; i<n ; i++) {\n                var sum = 0;\n                for (var j=0 ; j<n ; j++) {\n                    if (i !== j) { //else i == j That is a divide number\n                        sum = sum + A[i][j]*x[j];\n                    }\n                }\n                temp[i] = (B[i] - sum)/A[i][i]; //update x[i]\n                \n            }        \n            x = JSON.parse(JSON.stringify(temp));\n        } while(this.error(x, xold)); //if true , continue next iteration\n\n        this.setState({\n            showOutputCard: true\n        });\n\n      \n    }\n    error(xnew, xold) {\n        for (var i=0 ; i<xnew.length ; i++) {\n            epsilon[i] = Math.abs((xnew[i]-xold[i]) / xnew[i])\n        }\n        this.appendTable(x, epsilon);\n        for (i=0 ; i<epsilon.length ; i++) {\n            if (epsilon[i] > 0.000001) {\n                return true;\n            }    \n        }\n        return false;  \n    }   \n    createMatrix(row, column) {\n        A = []\n        B = []\n        matrixA = []\n        matrixB = []\n        x = []\n        dataInTable = []\n        for (var i=1 ; i<=row ; i++) {\n            for (var j=1 ; j<=column ; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\", \n                    backgroundColor:\"white\", \n                    marginInlineEnd: \"5%\", \n                    marginBlockEnd: \"5%\",\n                    color: \"black\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }} \n                id={\"a\"+i+\"\"+j} key={\"a\"+i+\"\"+j} placeholder={(this.state.CallExam)? this.state.a_value[i-1][j-1] : (\"a\"+i+\"\"+j) } />)  \n            }\n            matrixA.push(<br/>)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\", \n                backgroundColor:\"white\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }} \n            id={\"b\"+i} key={\"b\"+i} placeholder={(this.state.CallExam)? this.state.b_value[i-1] : (\"b\"+i) } />)\n            matrixX.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\", \n                backgroundColor:\"black\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }} \n            id={\"x\"+i} key={\"x\"+i} placeholder={(this.state.CallExam)? this.state.initial[i-1] : (\"x\"+i) } />)  \n            \n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n        \n\n    }\n    initMatrix() {\n        for(var i=0 ; i<this.state.row ; i++) {\n            A[i] = []\n            for(var j=0 ; j<this.state.column ; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\"+(i+1)+\"\"+(j+1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\"+(i+1)).value));\n            x.push(parseFloat(document.getElementById(\"x\"+(i+1)).value));\n        }\n    }\n    initialSchema(n) {\n        for (var i=1 ; i<=n ; i++) {\n            columns.push({\n                title: \"X\"+i,\n                dataIndex: \"x\"+i,\n                key: \"x\"+i\n            },)\n        }\n        for (i=1 ; i<=n ; i++) {\n            columns.push({\n                title: \"Error\"+i,\n                dataIndex: \"error\"+i,\n                key: \"error\"+i\n            },)\n        }\n    }\n    appendTable(x, error) {\n        var tag = ''\n        tag += '{\"iteration\": ' + count++ + ',';\n        for (var i=0 ; i<x.length ; i++) {\n            tag += '\"x'+(i+1)+'\": '+x[i].toFixed(8)+', \"error'+(i+1)+'\": ' + error[i].toFixed(8);\n            if (i !== x.length-1) {\n                tag += ','\n            }\n        }\n        tag += '}';\n        dataInTable.push(JSON.parse(tag));  \n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"jacobi iteration\").then(db=>{\n            this.setState({\n                row : db.data.data.row,\n                column : db.data.data.column,\n                a_value : db.data.data.A,\n                b_value : db.data.data.B,\n                initial : db.data.data.initial,\n                CallExam : true\n            }\n            )\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Jacobi Iteration Method</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            \n                            {this.state.showDimentionForm && \n                                <div>\n                                    <h2 style={{color:\"white\"}}>Row</h2><Input size=\"large\" name=\"row\" value={this.state.row} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>Column</h2><Input size=\"large\" name=\"column\" value={this.state.column} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick= {\n                                        ()=>{this.createMatrix(this.state.row, this.state.column);\n                                            this.initialSchema(this.state.row)}\n                                        }  \n                                        style={{background: \"#4caf12\", color: \"white\", float:\"right\"}}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div> \n                            }\n                            \n                            {this.state.showMatrixForm && \n                                <div>\n                                    <h2 style={{color:\"white\"}}>Matrix [A]</h2><br/>{matrixA}\n                                    <h2 style={{color:\"white\"}}>Vector [B]<br/></h2>{matrixB}\n                                    <h2 style={{color:\"white\"}}>Initial X<br/></h2>{matrixX}\n                                    <Button \n                                        id=\"matrix_button\"  \n                                        style={{background: \"#4caf12\", color: \"white\", float:\"right\"}}\n                                        onClick={()=>this.jacobi(parseInt(this.state.row))}>\n                                        Submit\n                                    </Button>                          \n                                </div>\n                            }\n                            \n                        </Card>                        \n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard && \n                            <Card\n                            title={<p style={{color:\"white\"}}>Output</p>}\n                            bordered={true}\n                            style={{width: \"100%\", background: \"#001529\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                            >\n                                <Table columns={columns} bordered dataSource={dataInTable} bodyStyle={{fontWeight: \"bold\", fontSize: \"18px\", color: \"black\", overflowX: \"scroll\", border:\"2px solid white\"}}></Table>\n                            </Card>\n                        }                          \n                    </div>\n\n                    \n\n \n\n                   \n                </div>\n\n                \n            </div>\n        );\n    }\n}\nexport default Jacobi;\n\n\n\n","import React, { Component } from 'react'\nimport {Card, Input, Button, Table} from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\n\nvar A = [], B = [], matrixA = [], matrixB = [], x , epsilon, output = [], dataInTable = [], count=1, matrixX = []\nvar columns = [\n    {\n      title: \"Iteration\",\n      dataIndex: \"iteration\",\n      key: \"iteration\"\n    }\n];\nclass Seidel extends Component {\n    \n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            a_value: [],\n            b_value: [],\n            initial: [],\n            showDimentionForm : true,\n            showMatrixForm: false,\n            showOutputCard: false,\n            CallExam: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.seidel = this.seidel.bind(this);\n    \n    }\n\n  \n    seidel(n) {\n        this.initMatrix();\n        console.log(x)\n        var xold\n        epsilon = new Array(n);\n        do {\n            xold = JSON.parse(JSON.stringify(x));\n            for (var i=0 ; i<n ; i++) {\n                var sum = 0;\n                for (var j=0 ; j<n ; j++) {\n                    if (i !== j) { //else i == j That is a divide number\n                        sum = sum + A[i][j]*x[j];\n                        console.log(sum)\n                    }\n                }\n                x[i] = (B[i] - sum)/A[i][i]; //update x[i]\n                \n            }     \n            console.log(\"gonna go to error\")   \n        } while(this.error(x, xold)); //if true , continue next iteration\n        \n        \n        for (i=0 ; i<x.length ; i++) {\n                output.push(x[i]);\n                output.push(<br/>);\n        }\n        this.setState({\n            showOutputCard: true\n        });\n\n      \n    }\n    error(xnew, xold) {\n        for (var i=0 ; i<xnew.length ; i++) {\n            epsilon[i] = Math.abs((xnew[i]-xold[i]) / xnew[i])\n        }\n        console.log(\"currently in error\")\n        this.appendTable(x, epsilon);\n        console.log(\"exit appendTable\")\n        for (i=0 ; i<epsilon.length ; i++) {\n            if (epsilon[i] > 0.000001) {\n                return true;\n            }    \n        }\n        return false;  \n    }   \n    createMatrix(row, column) {\n        A = []\n        B = []\n        matrixA = []\n        matrixB = []\n        matrixX = []\n        x = []\n        dataInTable = []\n        for (var i=1 ; i<=row ; i++) {\n            for (var j=1 ; j<=column ; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\", \n                    backgroundColor:\"white\", \n                    marginInlineEnd: \"5%\", \n                    marginBlockEnd: \"5%\",\n                    color: \"black\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }} \n                id={\"a\"+i+\"\"+j} key={\"a\"+i+\"\"+j} placeholder={(this.state.CallExam)?this.state.a_value[i-1][j-1]:(\"a\"+i+\"\"+j)} />)  \n            }\n            matrixA.push(<br/>)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\", \n                backgroundColor:\"white\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }} \n            id={\"b\"+i} key={\"b\"+i} placeholder={(this.state.CallExam)?this.state.b_value[i-1]:(\"b\"+i)} />)\n            matrixX.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\", \n                backgroundColor:\"black\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }} \n            id={\"x\"+i} key={\"x\"+i} placeholder={(this.state.CallExam)?this.state.initial[i-1]:\"x\"+i} />)\n                \n            \n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n        \n\n    }\n    initMatrix() {\n        for(var i=0 ; i<this.state.row ; i++) {\n            A[i] = []\n            for(var j=0 ; j<this.state.column ; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\"+(i+1)+\"\"+(j+1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\"+(i+1)).value));\n            x.push(parseFloat(document.getElementById(\"x\"+(i+1)).value));\n            console.log(x)\n        }\n    }\n    initialSchema(n) {\n        for (var i=1 ; i<=n ; i++) {\n            columns.push({\n                title: \"X\"+i,\n                dataIndex: \"x\"+i,\n                key: \"x\"+i\n            },)\n        }\n        for (i=1 ; i<=n ; i++) {\n            columns.push({\n                title: \"Error\"+i,\n                dataIndex: \"error\"+i,\n                key: \"error\"+i\n            },)\n        }\n    }\n    appendTable(x, error) {\n        console.log(x,error)\n        var tag = ''\n        tag += '{\"iteration\": ' + count++ + ',';\n        for (var i=0 ; i<x.length ; i++) {\n            tag += '\"x'+(i+1)+'\": '+x[i].toFixed(8)+', \"error'+(i+1)+'\": ' + error[i].toFixed(8);\n            if (i !== x.length-1) {\n                tag += ','\n            }\n        }\n        tag += '}';\n        dataInTable.push(JSON.parse(tag));  \n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"gauss-seidel\").then(db=>{\n            this.setState({\n                row : db.data.data.row,\n                column : db.data.data.column,\n                a_value : db.data.data.A,\n                b_value : db.data.data.B,\n                initial : db.data.data.initial,\n                CallExam : true\n            }\n            )\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Gauss-Seidel Iteration</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            {this.state.showDimentionForm && \n                                <div>\n                                    <h2 style={{color:\"white\"}}>Row</h2><Input size=\"large\" name=\"row\" value={this.state.row} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>Column</h2><Input size=\"large\" name=\"column\" value={this.state.column} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick= {\n                                        ()=>{this.createMatrix(this.state.row, this.state.column);\n                                            this.initialSchema(this.state.row)}\n                                        }  \n                                        style={{background: \"#4caf12\", color: \"white\", float:\"right\"}}>\n                                        Submit\n                                    </Button>\n                                </div> \n                            }\n                            \n                            {this.state.showMatrixForm && \n                                <div>\n                                    <h2 style={{color:\"white\"}}>Matrix [A]</h2><br/>{matrixA}\n                                    <h2 style={{color:\"white\"}}>Vector [B]<br/></h2>{matrixB}\n                                    <h2 style={{color:\"white\"}}>Initial X<br/></h2>{matrixX}\n                                    <Button \n                                        id=\"matrix_button\"  \n                                        style={{background: \"#4caf12\", color: \"white\", float:\"right\"}}\n                                        onClick={()=>this.seidel(parseInt(this.state.row))}>\n                                        Submit\n                                    </Button>\n                                </div>\n                            }\n                            \n                        </Card>                        \n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard && \n                            <Card\n                            title={\"Output\"}\n                            bordered={true}\n                            style={{width: \"100%\", background: \"white\", color: \"#001529\" }}\n                            id=\"outputCard\"\n                            >\n                                <Table columns={columns} dataSource={dataInTable} bordered={true} bodyStyle={{fontWeight: \"bold\", fontSize: \"18px\", color: \"black\", overflowX: \"scroll\"}}\n                                ></Table>\n                            </Card>\n                        }                           \n                    </div>\n\n                    \n\n\n\n                   \n                </div>\n\n                \n            </div>\n        );\n    }\n}\nexport default Seidel;\n\n\n\n","import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport { det, add, subtract, multiply, transpose } from 'mathjs';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport api from '../../api';\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\n\nvar A = [], B = [], matrixA = [], matrixB = [], matrixX = [], x, epsilon, dataInTable = [], count = 1, output , arrayOutput=[]\nvar columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"λ\",\n        dataIndex: \"lambda\",\n        key: \"lambda\"\n    },\n    {\n        title: \"{X}\",\n        dataIndex: \"X\",\n        key: \"X\"\n    },\n    {\n        title: \"Error\",\n        dataIndex: \"error\",\n        key: \"error\"\n    }\n];\nclass Gradient extends Component {\n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            a_value:[],\n            b_value:[],\n            initial:[],\n            showDimentionForm: true,\n            showMatrixForm: false,\n            showOutputCard: false,\n            CallExam : false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.conjugate_gradient = this.conjugate_gradient.bind(this);\n\n    }\n    positive_definite(dimention) {\n        var tempMatrix = []\n        for (var i = 0; i < dimention; i++) {\n            tempMatrix[i] = []\n            for (var j = 0; j < dimention; j++) {\n                tempMatrix[i][j] = A[i][j];\n            }\n        }\n        if (det(tempMatrix) <= 0) {\n            return false;\n        }\n        if (dimention !== this.state.row - 1) {\n            return this.positive_definite(++dimention);\n        }\n        return true;\n    }\n\n    conjugate_gradient() {\n        this.initMatrix();\n        if (!this.positive_definite(1)) {\n            output = \"This matrix doesn't positive definite\"\n            this.setState({\n                showOutputCard: true\n            });\n            return false;\n        }\n        //find {R0}\n        var R = subtract(multiply(A, x), B);\n        console.log(R)\n        //find D0\n        var D = multiply(R, -1);\n        console.log(D)\n        do {\n            //find λ\n            var λ = (multiply(multiply(transpose(D), R), -1)) /\n                (multiply(multiply(transpose(D), A), D))\n            console.log(λ)\n            /*------------------------------------------------------------------*/\n\n            //find new {X}\n            x = add(x, multiply(λ, D));\n            console.log(x)\n            //find new {R}\n            R = subtract(multiply(A, x), B);\n            console.log(R)\n            //find epsilon\n            epsilon = Math.sqrt(multiply(transpose(R), R)).toFixed(8);\n            this.appendTable(λ, JSON.stringify(x).split(',').join(\",\\n\"), epsilon);\n            console.log(epsilon)\n            var α = (multiply(multiply(transpose(R), A), D)) /\n                multiply(transpose(D), multiply(A, D)).toFixed(8);\n            console.log(α)\n            D = add(multiply(R, -1), multiply(α, D))\n            console.log(D)\n        } while (epsilon > 0.000001);\n        output = x\n        this.setState({\n            showOutputCard: true\n        });\n\n\n    }\n    createMatrix(row, column) {\n        A = []\n        B = []\n        matrixA = []\n        matrixB = []\n        matrixX = []\n        x = []\n        dataInTable = []\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\",\n                    backgroundColor: \"white\",\n                    marginInlineEnd: \"5%\",\n                    marginBlockEnd: \"5%\",\n                    color: \"black\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }}\n                    id={\"a\" + i + \"\" + j} key={\"a\" + i + \"\" + j} placeholder={(this.state.CallExam)? this.state.a_value[i-1][j-1]:(\"a\"+i+\"\"+j)}/>)\n            }\n            matrixA.push(<br />)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"b\" + i} key={\"b\" + i} placeholder={(this.state.CallExam)? this.state.b_value[i-1]:(\"b\"+i)}/>)\n            matrixX.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"x\" + i} key={\"x\" + i} placeholder={(this.state.CallExam)? this.state.initial[i-1]:(\"x\"+i)}/>)\n\n\n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n\n\n    }\n    initMatrix() {\n        for (var i = 0; i < this.state.row; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.column; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n            x.push(parseFloat(document.getElementById(\"x\" + (i + 1)).value));\n        }\n    }\n    appendTable(lambda, x, error) {\n        dataInTable.push({\n            iteration: count++,\n            lambda: lambda,\n            X: x,\n            error: error\n        });\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"conjugate gradient\").then(db=>{\n            this.setState({\n                row : db.data.data.row,\n                column : db.data.data.column,\n                a_value : db.data.data.A,\n                b_value : db.data.data.B,\n                initial : db.data.data.initial,\n                CallExam : true\n            }\n            )\n        })\n    }\n\n    answerOutput=()=>{\n        arrayOutput=[]\n        for(let i=0;i<this.state.row;i++){\n            arrayOutput.push(<p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>X{i+1}={output[i]}</p>)\n            arrayOutput.push(<br/>)\n        }\n        console.log(arrayOutput)\n    }\n\n    render() {\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Conjugate Gradient Iteration Method</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n\n                            {this.state.showDimentionForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Row</h2><Input size=\"large\" name=\"row\" value={this.state.row} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>Column</h2><Input size=\"large\" name=\"column\" value={this.state.column} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => { this.createMatrix(this.state.row, this.state.column) }\n                                    }\n                                        style={{ background: \"#4caf12\", color: \"white\",float:\"right\" }}>\n                                        Submit\n                                    </Button>\n                                </div>\n                            }\n\n                            {this.state.showMatrixForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Matrix [A]</h2><br />{matrixA}\n                                    <h2 style={{color:\"white\"}}>Vector [B]<br /></h2>{matrixB}\n                                    <h2 style={{color:\"white\"}}>Initial X<br /></h2>{matrixX}\n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"#4caf12\", color: \"white\" }}\n                                        onClick={() => {this.conjugate_gradient(parseInt(this.state.row));\n                                        this.answerOutput()}}>\n                                        Submit\n                                    </Button>\n                                </div>\n\n                            }\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <div>\n                                <Card\n                                    title={\"Output\"}\n                                    bordered={true}\n                                    style={{ background: \"white\", color: \"#001529\" }}\n                                    onChange={this.handleChange} id=\"answerCard\">\n                                    {arrayOutput}\n                                </Card>\n\n                            </div>\n\n                        }\n                    </div>\n                </div>\n                {/* <div className=\"row\"> */}\n                    {this.state.showOutputCard &&\n                        <div>\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ width: \"100%\", background: \"#001529\", color: \"#FFFFFFFF\" }}\n                                id=\"outputCard\"\n                            >\n                                <Table columns={columns} dataSource={dataInTable} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\", overflowX: \"scroll\" }}\n                                ></Table>\n                            </Card>\n\n                        </div>\n\n                    }\n                {/* </div> */}\n\n\n            </div>\n        );\n    }\n}\nexport default Gradient;\n\n\n\n","import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\nvar columns = [\n    {\n        title: \"No.\",\n        dataIndex: \"no\",\n        key: \"no\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Y\",\n        dataIndex: \"y\",\n        key: \"y\"\n    }\n];\nvar x, y, tableTag, interpolatePoint, tempTag, fx\n\nclass Newton extends Component {\n\n    constructor() {\n        super();\n        x = []\n        y = []\n        interpolatePoint = []\n        tempTag = []\n        tableTag = []\n        this.state = {\n            nPoints: 0,\n            X: 0,\n            array_x_value: [],\n            array_y_value:[],\n            point_value:[],\n            interpolatePoint: 0,\n            showInputForm: true,\n            showTableInput: false,\n            showOutputCard: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.newton_difference = this.newton_difference.bind(this);\n\n    }\n    createTableInput(n) {\n        for (var i = 1; i <= n; i++) {\n            x.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"x\" + i} key={\"x\" + i} placeholder={\"x\" + i} value={this.state.array_x_value[i-1]}/>);\n            y.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"y\" + i} key={\"y\" + i} placeholder={\"y\" + i} value={this.state.array_y_value[i-1]}/>);\n            tableTag.push({\n                no: i,\n                x: x[i - 1],\n                y: y[i - 1]\n            });\n        }\n\n\n        this.setState({\n            showInputForm: false,\n            showTableInput: true,\n        })\n    }\n    createInterpolatePointInput() {\n        for (var i = 1; i <= this.state.interpolatePoint; i++) {\n            tempTag.push(<Input style={{\n                width: \"14%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"p\" + i} key={\"p\" + i} placeholder={\"p\" + i} value={this.state.point_value[i-1]}/>)\n        }\n    }\n    initialValue() {\n        x = []\n        y = []\n        for (var i = 1; i <= this.state.nPoints; i++) {\n            x[i] = parseFloat(document.getElementById(\"x\" + i).value);\n            y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n        }\n        for (i = 1; i <= this.state.interpolatePoint; i++) {\n            interpolatePoint[i] = parseInt(document.getElementById(\"p\" + i).value);\n        }\n    }\n    C(n) {\n        if (n === 1) {\n            return 0\n        }\n        else {\n            return ((y[interpolatePoint[n]] - y[interpolatePoint[n - 1]]) / (x[interpolatePoint[n]] - x[interpolatePoint[n - 1]])) - this.C(n - 1)\n        }\n\n    }\n    findX(n, X) {\n        if (n < 1) {\n            return 1\n        }\n        else {\n            console.log(X + \" - \" + x[interpolatePoint[n]])\n            return (X - x[interpolatePoint[n]]) * this.findX(n - 1, X)\n        }\n    }\n    newton_difference(n, X) {\n        this.initialValue()\n        fx = y[1]\n        if (n === 2) { //if linear interpolate\n            fx += ((y[interpolatePoint[2]] - y[interpolatePoint[1]]) / (x[interpolatePoint[2]] - x[interpolatePoint[1]])) * (X - x[interpolatePoint[1]])\n        }\n        else {\n            for (var i = 2; i <= n; i++) {\n                fx += (this.C(i) / (x[interpolatePoint[i]] - x[interpolatePoint[1]])) * this.findX(i - 1, X)\n            }\n        }\n\n        this.setState({\n            showOutputCard: true\n        })\n\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"newton interpolation\").then(db=>{\n            this.setState({\n                nPoints : db.data.data.all_point,\n                X : db.data.data.x_target,\n                interpolatePoint : db.data.data.inter_point,\n                array_x_value : db.data.data.array_x,\n                array_y_value : db.data.data.array_y,\n                point_value : db.data.data.point\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"calBody\">\n                <div>\n                    <div>\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Newton's Divided Differences Interpolation</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            {this.state.showTableInput &&\n                                <div>\n                                    <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"white\", overflowY: \"scroll\", minWidth: 120, maxHeight: 300 }}></Table>\n                                    <br /><h2 style={{color:\"white\"}}>interpolatePoint {parseInt(this.state.interpolatePoint) === 2 ? \"(Linear)\" :\n                                        parseInt(this.state.interpolatePoint) === 3 ? \"(Quadratic)\" :\n                                            \"(Polynomial)\"}</h2>{tempTag}\n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"#4caf12\", color: \"white\" ,float:\"right\"}}\n                                        onClick={() => this.newton_difference(parseInt(this.state.interpolatePoint), parseFloat(this.state.X))}>\n                                        Submit\n                                </Button>\n                                </div>}\n\n                            {this.state.showInputForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\" value={this.state.nPoints} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>X</h2><Input size=\"large\" name=\"X\" value={this.state.X} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>interpolatePoint</h2><Input size=\"large\" name=\"interpolatePoint\" value={this.state.interpolatePoint} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => {\n                                            this.createTableInput(parseInt(this.state.nPoints));\n                                            this.createInterpolatePointInput()\n                                        }\n                                    }\n                                        style={{ background: \"#4caf12\", color: \"white\", float:\"right\" }}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ border: \"2px solid black\", background: \"white none repeat scroll 0% 0%\", color: \"#001529\" }}\n                            >\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>f({this.state.X})={fx}</p>\n\n                            </Card>\n                        }\n                    </div>\n\n                </div>\n\n\n            </div>\n        );\n    }\n}\nexport default Newton;\n\n\n\n","import React, { Component } from 'react'\nimport {Card, Input, Button, Table} from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\n\nvar columns = [\n    {\n      title: \"No.\",\n      dataIndex: \"no\",\n      key: \"no\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Y\",\n        dataIndex: \"y\",\n        key: \"y\"\n    }\n];\nvar x, y, tableTag,  interpolatePoint, tempTag, fx\n\nclass Lagrange extends Component {\n    \n    constructor() {\n        super();\n        x = []\n        y = []\n        interpolatePoint = []\n        tempTag = []\n        tableTag = []\n        this.state = {\n            nPoints: 0,\n            X: 0,\n            array_x_value: [],\n            array_y_value: [],\n            point_value: [],\n            interpolatePoint: 0,\n            showInputForm : true,\n            showTableInput: false,\n            showOutputCard: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.lagrange = this.lagrange.bind(this);\n    \n    }  \n    createTableInput(n) {\n        for (var i=1 ; i<=n ; i++) {\n            x.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\", \n                backgroundColor:\"black\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n            id={\"x\"+i} key={\"x\"+i} placeholder={\"x\"+i} value={this.state.array_x_value[i-1]}/>);\n            y.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\", \n                backgroundColor:\"black\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }} \n            id={\"y\"+i} key={\"y\"+i} placeholder={\"y\"+i} value={this.state.array_y_value[i-1]}/>);   \n            tableTag.push({\n                no: i,\n                x: x[i-1],\n                y: y[i-1]\n            });\n        }\n\n        this.setState({\n            showInputForm: false,\n            showTableInput: true,\n        })\n    }\n    createInterpolatePointInput(){\n        for (var i=1 ; i<=this.state.interpolatePoint ; i++) {\n            tempTag.push(<Input style={{\n                width: \"14%\",\n                height: \"50%\", \n                backgroundColor:\"black\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }} \n            id={\"p\"+i} key={\"p\"+i} placeholder={\"p\"+i} value={this.state.point_value[i-1]}/>)\n        }\n    }\n    initialValue() {\n        x = []\n        y = []\n        for (var i=1 ; i<=this.state.nPoints ; i++) {\n            x[i] = parseFloat(document.getElementById(\"x\"+i).value);\n            y[i] = parseFloat(document.getElementById(\"y\"+i).value);\n        }\n        for (i=1 ; i<=this.state.interpolatePoint ; i++) {\n            interpolatePoint[i] = parseFloat(document.getElementById(\"p\"+i).value);\n        }\n    }\n\n    L(X, index, n) {\n        var numerate = 1/*ตัวเศษ*/, denominate = 1/*ตัวส่วน*/;\n        for (var i=1 ; i<=n ; i++) {\n            if (i !== index) {\n                numerate *= x[i]-X;\n                denominate *= x[i] - x[index];\n            }\n        } \n        console.log(numerate/denominate)\n        return parseFloat(numerate/denominate);\n    }\n\n    lagrange(n, X) {\n        fx = 0\n        this.initialValue()\n        for (var i=1 ; i<=n ; i++) {\n            fx += this.L(X, i, n)*y[i];\n        }\n        this.setState({\n            showOutputCard: true\n        })\n\n    } \n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"lagrange interpolation\").then(db=>{\n            this.setState({\n                nPoints : db.data.data.all_point,\n                X : db.data.data.x_target,\n                interpolatePoint : db.data.data.inter_point,\n                array_x_value : db.data.data.array_x,\n                array_y_value : db.data.data.array_y,\n                point_value : db.data.data.point\n            })\n        })\n    }\n\n\n    render() {\n        return(\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Lagrange Interpolation</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            {this.state.showInputForm && \n                                <div>\n                                    <h2 style={{color:\"white\"}}>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\" value={this.state.nPoints} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>X</h2><Input size=\"large\" name=\"X\" value={this.state.X} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>interpolatePoint</h2><Input size=\"large\" name=\"interpolatePoint\" value={this.state.interpolatePoint} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"dimention_button\" onClick= {\n                                        ()=>{this.createTableInput(parseInt(this.state.nPoints));\n                                        this.createInterpolatePointInput()}\n                                    }  \n                                        style={{background: \"#4caf12\", color: \"white\" ,float:\"right\"}}>\n                                        Submit\n                                    </Button>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                </div> \n                            }\n                            {this.state.showTableInput && \n                                <div>\n                                    <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{fontWeight: \"bold\", fontSize: \"18px\", color: \"white\" , overflowY: \"scroll\", minWidth: 120, maxHeight: 300}}></Table>\n                                    <br/><h2 style={{color:\"white\"}}>interpolatePoint {parseInt(this.state.interpolatePoint) === 2 ? \"(Linear)\": \n                                                            parseInt(this.state.interpolatePoint) === 3 ? \"(Quadratic)\" :\n                                                            \"(Polynomial)\"}</h2>{tempTag}\n                                    <Button \n                                        id=\"matrix_button\"  \n                                        style={{background: \"yellow\", color: \"#001529\"}}\n                                        onClick={()=>this.lagrange(parseInt(this.state.interpolatePoint), parseFloat(this.state.X))}>\n                                        Submit\n                                    </Button>\n                                </div>\n                            }\n                     \n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                            title={\"Output\"}\n                            bordered={true}\n                            style={{ border: \"2px solid black\", background: \"white none repeat scroll 0% 0%\", color: \"white\" }}\n                            >\n                                <p style={{fontSize: \"24px\", fontWeight: \"bold\",color:\"#001529\"}}>f({this.state.X})={fx}</p>\n                            </Card>                        \n                        }                        \n                    </div>     \n                </div>\n\n                \n            </div>\n        );\n    }\n}\nexport default Lagrange;","import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\nvar columns = [\n    {\n        title: \"No.\",\n        dataIndex: \"no\",\n        key: \"no\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Y\",\n        dataIndex: \"y\",\n        key: \"y\"\n    }\n];\nvar x = [], y = [], tableTag = [], answer\n\nclass Spline extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            nPoints: 0,\n            X: 0,\n            array_x_value: [],\n            array_y_value:[],\n            showInputForm: true,\n            showTableInput: false,\n            showOutputCard: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n\n\n    createTableInput(n) {\n        for (var i = 1; i <= n; i++) {\n            x.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"x\" + i} key={\"x\" + i} placeholder={\"x\" + i} value={this.state.array_x_value[i-1]}/>);\n            y.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"y\" + i} key={\"y\" + i} placeholder={\"y\" + i} value={this.state.array_y_value[i-1]}/>);\n            tableTag.push({\n                no: i,\n                x: x[i - 1],\n                y: y[i - 1]\n            });\n        }\n\n\n        this.setState({\n            showInputForm: false,\n            showTableInput: true,\n        })\n    }\n    initialValue(X) {\n        x = []\n        y = []\n        for (var i = 0; i < this.state.nPoints; i++) {\n            x[i] = parseFloat(document.getElementById(\"x\" + (i + 1)).value);\n            y[i] = parseFloat(document.getElementById(\"y\" + (i + 1)).value);\n        }\n        answer = this.spline(X, x, y)\n    }\n    spline(x, xs, ys) {\n        var ks = xs.map(function () { return 0 })\n        ks = this.getNaturalKs(xs, ys, ks)\n        var i = 1;\n        while (xs[i] < x) i++;\n        var t = (x - xs[i - 1]) / (xs[i] - xs[i - 1]);\n        var a = ks[i - 1] * (xs[i] - xs[i - 1]) - (ys[i] - ys[i - 1]);\n        var b = -ks[i] * (xs[i] - xs[i - 1]) + (ys[i] - ys[i - 1]);\n        var q = (1 - t) * ys[i - 1] + t * ys[i] + t * (1 - t) * (a * (1 - t) + b * t);\n        console.log(q)\n        this.setState({\n            showOutputCard: true\n        })\n\n        return q;\n    }\n\n    getNaturalKs(xs, ys, ks) {\n        var n = xs.length - 1;\n        var A = this.zerosMat(n + 1, n + 2);\n\n        for (var i = 1; i < n; i++)  // rows\n        {\n            A[i][i - 1] = 1 / (xs[i] - xs[i - 1]);\n            A[i][i] = 2 * (1 / (xs[i] - xs[i - 1]) + 1 / (xs[i + 1] - xs[i]));\n            A[i][i + 1] = 1 / (xs[i + 1] - xs[i]);\n            A[i][n + 1] = 3 * ((ys[i] - ys[i - 1]) / ((xs[i] - xs[i - 1]) * (xs[i] - xs[i - 1])) + (ys[i + 1] - ys[i]) / ((xs[i + 1] - xs[i]) * (xs[i + 1] - xs[i])));\n        }\n\n        A[0][0] = 2 / (xs[1] - xs[0]);\n        A[0][1] = 1 / (xs[1] - xs[0]);\n        A[0][n + 1] = 3 * (ys[1] - ys[0]) / ((xs[1] - xs[0]) * (xs[1] - xs[0]));\n\n        A[n][n - 1] = 1 / (xs[n] - xs[n - 1]);\n        A[n][n] = 2 / (xs[n] - xs[n - 1]);\n        A[n][n + 1] = 3 * (ys[n] - ys[n - 1]) / ((xs[n] - xs[n - 1]) * (xs[n] - xs[n - 1]));\n\n        return this.solve(A, ks);\n    }\n\n    solve(A, ks) {\n        var m = A.length;\n        for (var k = 0; k < m; k++)  // column\n        {\n            // pivot for column\n            var i_max = 0; var vali = Number.NEGATIVE_INFINITY;\n            for (var i = k; i < m; i++) if (A[i][k] > vali) { i_max = i; vali = A[i][k]; }\n            this.swapRows(A, k, i_max);\n\n            // for all rows below pivot\n            for (i = k + 1; i < m; i++) {\n                for (var j = k + 1; j < m + 1; j++)\n                    A[i][j] = A[i][j] - A[k][j] * (A[i][k] / A[k][k]);\n                A[i][k] = 0;\n            }\n        }\n        for (i = m - 1; i >= 0; i--) // rows = columns\n        {\n            var v = A[i][m] / A[i][i];\n            ks[i] = v;\n            for (j = i - 1; j >= 0; j--) // rows\n            {\n                A[j][m] -= A[j][i] * v;\n                A[j][i] = 0;\n            }\n        }\n        console.log(A)\n        return ks;\n    }\n\n    zerosMat(r, c) {\n        var A = [];\n        for (var i = 0; i < r; i++) {\n            A.push([]);\n            for (var j = 0; j < c; j++) A[i].push(0);\n        }\n        return A;\n    }\n\n    swapRows(m, k, l) {\n        var p = m[k]; m[k] = m[l]; m[l] = p;\n    }\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"spline interpolation\").then(db=>{\n            this.setState({\n                nPoints : db.data.data.all_point,\n                X : db.data.data.x_target,\n                array_x_value : db.data.data.array_x,\n                array_y_value : db.data.data.array_y\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Spline Interpolation</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            {this.state.showTableInput &&\n                                <div>\n                                    <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"white\", overflowY: \"scroll\", minWidth: 120, maxHeight: 300 }}>\n                                    </Table><br/><br/>\n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"#4caf12\", color: \"white\", float:\"right\" }}\n                                        onClick={() => this.initialValue(parseFloat(this.state.X))}>\n                                        Submit\n                                </Button>\n                                </div>}\n\n                            {this.state.showInputForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\" value={this.state.nPoints} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>X</h2><Input size=\"large\" name=\"X\" value={this.state.X} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => { this.createTableInput(parseInt(this.state.nPoints)) }\n                                    }\n                                        style={{ background: \"#4caf12\", color: \"white\",float:\"right\" }}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ background: \"white\", color: \"#001529\", float: \"inline-start\" }}\n                                id=\"outputCard\"\n                            >\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>f({this.state.X}) = {answer}</p>\n                            </Card>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Spline;\n\n\n\n","import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport 'antd/dist/antd.css';\nimport { inv, multiply, sum } from 'mathjs';\nimport '../../style/screen.css'\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\nvar columns = [\n    {\n        title: \"No.\",\n        dataIndex: \"no\",\n        key: \"no\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Y\",\n        dataIndex: \"y\",\n        key: \"y\"\n    }\n];\nvar x, y, tableTag, answer, fX_target\n\nclass Linear extends Component {\n\n    constructor() {\n        super();\n        x = []\n        y = []\n\n        tableTag = []\n        this.state = {\n            nPoints: 0,\n            X_target:0,\n            array_x_value: [],\n            array_y_value: [],\n            interpolatePoint: 0,\n            showInputForm: true,\n            showTableInput: false,\n            showOutputCard: false,\n            CallExam: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n\n\n    }\n    createTableInput(n) {\n        for (var i = 1; i <= n; i++) {\n            x.push(<Input style={{\n                width: \"70%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\",\n                justifyContent: \"center\"\n            }}\n                id={\"x\" + i} key={\"x\" + i} placeholder={(this.state.CallExam)?this.state.array_x_value[i-1]:\"x\" + i} />);\n            y.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"y\" + i} key={\"y\" + i} placeholder={(this.state.CallExam)?this.state.array_y_value[i-1]:\"y\" + i} />);\n            tableTag.push({\n                no: i,\n                x: x[i - 1],  //skip head table\n                y: y[i - 1]   //skip head table\n            })\n\n        }\n\n        this.setState({\n            showInputForm: false,\n            showTableInput: true\n        })\n    }\n    initialValue(n) {\n        x = new Array(n + 1)\n        y = []\n        for (var i = 1; i <= n; i++) {\n            x[i] = parseInt(document.getElementById(\"x\" + i).value);\n\n        }\n        for (i = 1; i <= n; i++) {\n            y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n        }\n    }\n    linear(n,X_target) {\n        var matrixX = [2], matrixY = [2], exponent = 0\n        for (var i = 0; i < 2; i++) {\n            matrixX[i] = []\n            for (var j = 0; j < 2; j++) {\n                if (i === 0 && j === 0) {\n                    matrixX[i][j] = n\n                }\n                else if (i === 0 && j === 1) {\n                    matrixX[i][j] = this.summation(x, 1)\n                }\n                else {\n                    matrixX[i][j] = this.summation(x, exponent + j)\n                }\n            }\n            exponent++\n        }\n        matrixY[0] = sum(y)\n        matrixY[1] = this.summationOfTwo(x, y)\n        matrixX = inv(matrixX)\n        answer = multiply(matrixY, matrixX)\n        //a0+a1(x)\n        fX_target = answer[0]+(answer[1]*X_target)\n        this.setState({\n            showOutputCard: true\n        })\n    }\n    summation(A, exponent) {\n        var sum = 0\n        for (var i = 1; i < A.length; i++) {\n            sum += Math.pow(A[i], exponent)\n        }\n        return sum\n    }\n    summationOfTwo(A, B) {\n        var sum = 0\n        for (var i = 1; i < A.length; i++) {\n            sum += A[i] * B[i]\n        }\n        return sum\n    }\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"linear regression\").then(db=>{\n            this.setState({\n                nPoints : db.data.data.all_point,\n                X_target : db.data.data.x_target,\n                array_x_value : db.data.data.array_x,\n                array_y_value : db.data.data.array_y,\n                CallExam: true\n            })\n        })\n    }\n\n    render() {\n        let {X_target} = this.state\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Linear Regression</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            {this.state.showInputForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\" value={this.state.nPoints} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => this.createTableInput(parseInt(this.state.nPoints))}\n                                        style={{ background: \"#4caf12\", color: \"white\", float:\"right\" }}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n                            {this.state.showTableInput &&\n                                <div>\n                                    <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"white\", overflowY: \"scroll\", minWidth: 120, maxHeight: 300 }}></Table>\n                                    <h2 style={{color:\"white\"}}>X</h2><Input size=\"large\" name=\"X_target\" value={this.state.X_target} style={InputStyle}></Input><br/><br/>\n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"#4caf12\", color: \"white\", float:\"right\" }}\n                                        onClick={() => {\n                                            this.initialValue(parseInt(this.state.nPoints));\n                                            this.linear(parseInt(this.state.nPoints),X_target)\n                                        }}\n                                    >\n                                        Submit\n                                </Button>\n                                </div>\n                            }\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ border: \"2px solid black\", background: \"white none repeat scroll 0% 0%\", color: \"#001529\" }}\n                            >\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>y = {fX_target}</p>\n                            </Card>\n                        }\n                    </div>\n\n\n\n\n\n\n                </div>\n\n\n            </div>\n        );\n    }\n}\nexport default Linear;","import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport { lusolve, squeeze, sum,pow } from 'mathjs';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\nvar columns = [\n    {\n        title: \"No.\",\n        dataIndex: \"no\",\n        key: \"no\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Y\",\n        dataIndex: \"y\",\n        key: \"y\"\n    }\n];\nvar x, y, tableTag, regressionMatrixX, regressionMatrixY, matrixA, matrixB, answer,fX_target\n\nclass Polynomial extends Component {\n\n    constructor() {\n        super();\n        x = []\n        y = []\n\n        tableTag = []\n        this.state = {\n            nPoints: 0,\n            m: 0,\n            X_target: 0,\n            array_x_value:[],\n            array_y_value:[],\n            interpolatePoint: 0,\n            showInputForm: true,\n            showTableInput: false,\n            showOutputCard: false,\n            CallExam: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n\n\n    }\n    createTableInput(n, m) {\n        for (var i = 1; i <= n; i++) {\n            x.push(<Input style={{\n                width: \"70%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\",\n                justifyContent: \"center\"\n            }}\n                id={\"x\" + i} key={\"x\" + i} placeholder={(this.state.CallExam)?this.state.array_x_value[i-1]:\"x\" + i} />);\n            y.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"y\" + i} key={\"y\" + i} placeholder={(this.state.CallExam)?this.state.array_y_value[i-1]:\"y\" + i} />);\n            tableTag.push({\n                no: i,\n                x: x[i - 1],\n                y: y[i - 1]\n            })\n\n        }\n        regressionMatrixX = new Array(m + 1)\n        regressionMatrixY = new Array(m + 1)\n        for (i = 1; i <= m + 1; i++) {\n            regressionMatrixX[i] = []\n            for (var j = 1; j <= m + 1; j++) {\n                regressionMatrixX[i][j] = []\n            }\n        }\n\n        this.setState({\n            showInputForm: false,\n            showTableInput: true\n        })\n    }\n    initialValue(n, m) {\n        x = new Array(m + 1)\n        y = []\n        for (var i = 1; i <= n; i++) {\n            x[i] = parseFloat(document.getElementById(\"x\" + i).value);\n\n        }\n        for (i = 1; i <= n; i++) {\n            y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n        }\n    }\n    polynomial(n, m,X_target) {\n        var exponent = 1\n        //find matrix X\n        for (var i = 1; i <= m + 1; i++) {\n            for (var j = 1; j <= m + 1; j++) {\n                if (i === 1 && j === 1) {\n                    regressionMatrixX[i][j] = n\n                    continue\n                }\n                regressionMatrixX[i][j] = this.summation(x, exponent)\n                exponent++\n\n            }\n            exponent = i\n        }\n        //find matrix Y\n        regressionMatrixY[1] = sum(y)\n        for (i = 2; i <= m + 1; i++) {\n            regressionMatrixY[i] = this.summationOfTwo(x, y, i - 1)\n        }\n        console.log(regressionMatrixY)\n        this.findX(m,X_target)\n\n    }\n    findX(m,X_target) {\n        matrixA = new Array(m + 1)\n        matrixB = new Array(m + 1)\n        for (var i = 0; i < m + 1; i++) {\n            matrixA[i] = []\n            for (var j = 0; j < m + 1; j++) {\n                matrixA[i][j] = regressionMatrixX[i + 1][j + 1]\n            }\n            matrixB[i] = regressionMatrixY[i + 1]\n        }\n        answer = squeeze(lusolve(matrixA, matrixB))\n        console.log(answer)\n        //fx=a0+..+amx^m\n        fX_target = answer[0]\n        for(i=1;i<m;i++){\n            fX_target += answer[i]*pow(X_target,i)\n        }\n        console.log(fX_target)\n        this.setState({\n            showOutputCard: true\n        })\n    }\n    summation(A, exponent) {\n        var sum = 0\n        for (var i = 1; i < A.length; i++) {\n            sum += Math.pow(A[i], exponent)\n        }\n        return sum\n    }\n    summationOfTwo(x, y, exponent) {\n        var sum = 0\n        for (var i = 1; i < y.length; i++) {\n            sum += Math.pow(x[i], exponent) * y[i]\n        }\n        return sum\n    }\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"polynomial regression\").then(db=>{\n            this.setState({\n                nPoints : db.data.data.all_point,\n                X_target : db.data.data.x_target,\n                array_x_value : db.data.data.array_x,\n                array_y_value : db.data.data.array_y,\n                m: db.data.data.m,\n                CallExam: true\n            })\n        })\n        console.log(this.state.m)\n    }\n\n    render() {\n        let {X_target} = this.state\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Polynomial Regression</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            {this.state.showInputForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\" value={this.state.nPoints} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>Order(m)</h2><Input size=\"large\" name=\"m\" value={this.state.m} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => this.createTableInput(parseInt(this.state.nPoints), parseInt(this.state.m))}\n                                        style={{ background: \"#4caf12\", color: \"white\", float:\"right\" }}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n                            {this.state.showTableInput &&\n                                <div>\n                                    <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"white\", overflowY: \"scroll\", minWidth: 120, maxHeight: 300 }}></Table>\n                                    <h2 style={{color:\"white\"}}>X</h2><Input size=\"large\" name=\"X_target\" value={this.state.X_target} style={InputStyle}></Input>\n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"#4caf12\", color: \"white\", float:\"right\" }}\n                                        onClick={() => {\n                                            this.initialValue(parseInt(this.state.nPoints), parseInt(this.state.m));\n                                            this.polynomial(parseInt(this.state.nPoints), parseInt(this.state.m),X_target)\n                                        }}\n                                    >\n                                        Submit\n                                </Button>\n                                </div>\n                            }\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ border: \"2px solid black\", background: \"white none repeat scroll 0% 0%\", color: \"#001529\" }}\n                            >\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>y = {fX_target}</p>\n                            </Card>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Polynomial;","import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport { lusolve, round, squeeze } from 'mathjs';\nimport api from '../../api'\n\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\nvar columns = [\n    {\n        title: \"No.\",\n        dataIndex: \"no\",\n        key: \"no\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Y\",\n        dataIndex: \"y\",\n        key: \"y\"\n    }\n];\nvar x, y, tableTag, fx, regressionMatrixX, regressionMatrixY, matrixA, matrixB, answer ,X_target,X_tValue\n\nclass MultipleLinear extends Component {\n\n    constructor() {\n        super();\n        x = []\n        y = []\n        X_target = []\n        X_tValue = []\n        tableTag = []\n        this.state = {\n            nPoints: 0,\n            X: 0,\n            array_x_value: [],\n            array_y_value: [],\n            array_xt_value: [],\n            showInputForm: true,\n            showTableInput: false,\n            showOutputCard: false,\n            CallExam: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n\n\n    }\n    createTableInput(n, X) {\n        for (var i = 1; i <= n; i++) {\n            x[i] = []\n            for (var j = 1; j <= X; j++) {\n                x[i].push(<Input style={{\n                    width: \"70%\",\n                    height: \"50%\",\n                    backgroundColor: \"white\",\n                    marginInlineEnd: \"5%\",\n                    marginBlockEnd: \"5%\",\n                    color: \"black\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\",\n                    justifyContent: \"center\",\n                }}\n                    id={\"x\" + i + \"\" + j} key={\"x\" + i + \"\" + j} placeholder={(this.state.CallExam)?this.state.array_x_value[i-1][j-1]:\"x\" + i + \"\" + j} />);\n            }\n            y.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"y\" + i} key={\"y\" + i} placeholder={(this.state.CallExam)?this.state.array_y_value[i-1]:\"y\" + i} />);\n            tableTag.push({\n                no: i,\n                x: x[i],\n                y: y[i - 1]\n            })\n\n        }\n        regressionMatrixX = new Array(X + 1)\n        regressionMatrixY = new Array(X + 1)\n        for (i = 1; i <= X + 1; i++) {\n            regressionMatrixX[i] = []\n            for (j = 1; j <= X + 1; j++) {\n                regressionMatrixX[i][j] = []\n            }\n        }\n    }\n\n    createTableX_target(X) {\n        for (var i = 1; i <= X; i++) {\n                X_target.push(<Input style={{\n                width: \"14%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                    id={\"xt\" + i} key={\"xt\" + i} placeholder={(this.state.CallExam)?this.state.array_xt_value[i-1]:(\"xt\"+i)} />);\n                    console.log(i)\n        }\n        this.setState({\n            showInputForm: false,\n            showTableInput: true,\n        })\n    }\n\n    initialValue(n, X) {\n        x = new Array(X + 1)\n        y = []\n        X_tValue = []\n        for (var i = 1; i <= X; i++) {\n            x[i] = []\n            for (var j = 1; j <= n; j++) {\n                x[i][j] = parseInt(document.getElementById(\"x\" + j + \"\" + i).value);\n            }\n        }\n        for (i = 1; i <= n; i++) {\n            y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n        }\n        for (i = 1; i <= X; i++) {\n            X_tValue[i] = parseFloat(document.getElementById(\"xt\" + i).value);\n        }\n    }\n    multipleLinear(n, X) {\n        for (var i = 1; i <= X + 1; i++) {\n            for (var j = i; j <= X + 1; j++) {\n                if (i === 1) {\n                    if (j === 1) {\n                        regressionMatrixX[i][j] = n\n                        regressionMatrixY[j] = this.summation(y)\n                    }\n                    else {\n                        regressionMatrixX[i][j] = regressionMatrixX[j][i] = this.summation(x[j - 1])\n                        regressionMatrixY[j] = this.summationOfTwo(x[j - 1], y)\n                    }\n\n\n                }\n                else {\n                    regressionMatrixX[i][j] = regressionMatrixX[j][i] = this.summationOfTwo(x[i - 1], x[j - 1])\n                }\n            }\n        }\n        this.findX(n,X)\n    }\n    findX(n,X) {\n        matrixA = new Array(X + 1)\n        matrixB = new Array(X + 1)\n        for (var i = 0; i < X + 1; i++) {\n            matrixA[i] = []\n            for (var j = 0; j < X + 1; j++) {\n                matrixA[i][j] = regressionMatrixX[i + 1][j + 1]\n            }\n            matrixB[i] = regressionMatrixY[i + 1]\n        }\n        answer = squeeze(round(lusolve(matrixA, matrixB)))\n        console.log(answer)\n        //f(x) = sum(yi-(a0+...+akxki))\n        fx = answer[0]\n        for(i=1;i<=X;i++){\n            fx += answer[i]*X_tValue[i]\n        }\n        console.log(fx)\n        this.setState({\n            showOutputCard: true\n        })\n    }\n    summation(A) {\n        var sum = 0\n        for (var i = 1; i < A.length; i++) {\n            sum += A[i]\n        }\n        return sum\n    }\n    summationOfTwo(A, B) {\n        var sum = 0\n        for (var i = 1; i < A.length; i++) {\n            sum += A[i] * B[i]\n        }\n        return sum\n    }\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"multiple linear regression\").then(db=>{\n            this.setState({\n                nPoints : db.data.data.all_point,\n                array_xt_value : db.data.data.x_multi_target,\n                array_x_value : db.data.data.array_x_multi,\n                array_y_value : db.data.data.array_y,\n                X : db.data.data.x_point,\n                CallExam: true\n            })\n        })\n        console.log(this.state.array_xt_value)\n    }\n\n    render() {\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Multiple Linear Regression</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            {this.state.showInputForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Number of X</h2><Input size=\"large\" name=\"X\" value={this.state.X} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\"value={this.state.nPoints} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => {\n                                            this.createTableInput(parseInt(this.state.nPoints), parseInt(this.state.X));\n                                            this.createTableX_target(parseInt(this.state.X))}}\n                                        style={{ background: \"#4caf12\", color: \"white\", float:\"right\" }}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n                            {this.state.showTableInput &&\n                                <div>\n                                    <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"white\", overflowY: \"scroll\", minWidth: 120, maxHeight: 300 }}></Table>\n                                    <h2 style={{color:\"white\"}}>X_target<br /></h2>{X_target}<br/>\n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"#4caf12\", color: \"white\", float:\"right\" }}\n                                        onClick={() => {\n                                            this.initialValue(parseInt(this.state.nPoints), parseInt(this.state.X));\n                                            this.multipleLinear(parseInt(this.state.nPoints), parseInt(this.state.X))\n                                        }}\n                                    >\n                                        Submit\n                                </Button>\n                                </div>\n                            }\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ border: \"2px solid black\", background: \"white none repeat scroll 0% 0%\", color: \"#001529\" }}\n                            >\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>fx={fx}</p>\n\n                            </Card>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default MultipleLinear;","import { compile, derivative } from 'mathjs';\nvar Algebrite = require('algebrite');\n\nconst func = (fx, X) => {\n    var expr = compile(fx); // f(x)\n    let scope = { x: parseFloat(X) }; //f(x) ; x=input\n    return expr.evaluate(scope);\n}\nconst funcDiff = (X) => {\n    var expr = derivative(X, 'x');\n    let scope = {x:parseFloat(X)};\n    return expr.evaluate(scope); \n}\n\nconst funcDiffDegreeN = (fx, X, degree) => {\n    var temp = fx, expr;\n    for (var i=1 ; i<=degree ; i++) {\n        temp = derivative(temp, 'x')\n        expr = temp\n    }\n    \n    let scope = {x:parseFloat(X)}\n    return expr.evaluate(scope)\n}\nconst error = (xnew, xold) => {\n    return Math.abs((xnew - xold) / xnew);\n}\nconst exactIntegrate = (fx, a, b) => {\n    var expr = compile(Algebrite.integral(Algebrite.eval(fx)).toString())\n    return expr.evaluate({x:b}) - expr.evaluate({x:a})\n\n}\nexport { func, funcDiff, funcDiffDegreeN, error, exactIntegrate };","import React, { Component } from 'react'\nimport { range, compile } from 'mathjs';\nimport Plot from 'react-plotly.js';\n\nexport default class Graph extends Component {\n    render() {\n        let { fx, title} = this.props;\n        return (\n            <Plot\n                data={[\n                    {\n                        x: range(-10, 10, 0.5).toArray(),\n                        y: range(-10, 10, 0.5).toArray().map(function (x) {\n                            return compile(fx).evaluate({ x: x })\n                        }),\n                        type: 'scatter',\n                        marker: { color: 'red' },\n                    },\n                ]}\n                layout={{ title: title}}\n            />\n        )\n    }\n}\n","import axios from 'axios'\n\nconst api = axios.create({\n    baseURL: 'https://ar3ee3ar.github.io/numer-react:8080/api',\n})\n\nexport const getAllExam = () => api.get(`/exams`)\nexport const getExamByMethod = name => api.get(`/exams/${name}`)\n\nconst apis = {\n    getAllExam,\n    getExamByMethod,\n}\n\nexport default apis\n","import React from 'react';\nimport {Input ,Card,Button,Table} from 'antd';\nimport {func} from '../../group_library/lib_use.js';\nimport Graph from '../../components/Graph'\nimport 'antd/dist/antd.css';\nimport '../../style/screen.css'\nimport api from '../../api'\n\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\nvar dataInTable = []\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"XL\",\n        dataIndex: \"xl\",\n        key: \"xl\"\n    },\n    {\n        title: \"XR\",\n        dataIndex: \"xr\",\n        key: \"xr\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Error\",\n        key: \"error\",\n        dataIndex: \"error\"\n    }\n];\n\nclass Bisection extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n          fx : \"\",\n          Xl : 0.0,\n          Xr : 0.0,\n          showOutputCard: false,\n            showGraph: false,\n            moveLeft: false,\n            showInputCard: true,\n             disabled: false \n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.bisection = this.bisection.bind(this);\n    }\n\n    handleChange(event) {\n      this.setState({[event.target.name]: event.target.value});\n    }\n\n    bisection(Xl,Xr){\n      var increaseFunction = false;\n      var error=parseFloat(999.000000);\n      var Xm=(Xl+Xr)/2.0;\n      var count = 0;\n        var data = []\n        data['xl'] = []\n        data['xr'] = []\n        data['x'] = []\n        data['error'] = []\n      if (func(this.state.fx, Xl) < func(this.state.fx, Xr)) {\n        increaseFunction = true;\n      }\n      do{\n          Xm = (Xl + Xr) / 2;\n            if (func(this.state.fx, Xm) * func(this.state.fx, Xr) < 0) {\n                error = Math.abs((Xm - Xr) / Xr);\n                if (increaseFunction) {\n                    Xl = Xm;\n                }\n                else {\n                    Xr = Xm;\n                }\n\n            }\n            else {\n                error = Math.abs((Xm - Xl) / Xm);\n                if (increaseFunction) {\n                    Xr = Xm;\n                }\n                else {\n                    Xl = Xm; \n                }\n            }\n            data['xl'][count] = Xl;\n            data['xr'][count] = Xr;\n            data['x'][count] = Xm.toFixed(8);\n            data['error'][count] = error.toFixed(8);\n            count++;\n          //console.log(Xm.toFixed(6));\n        }while(error>0.000001)\n        //console.log((Xm.toString()).substring(0,8)) //change Float to String make number don't round up\n        //console.log(\"answer: \"+Xm)\n        this.createTable(data['xl'], data['xr'], data['x'], data['error']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true,\n            showInputCard : false,\n            disabled: true\n        })\n    }\n\n    createTable(xl, xr, x, error) {\n        dataInTable = []\n        for (var i = 0; i < xl.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                xl: xl[i],\n                xr: xr[i],\n                x: x[i],\n                error: error[i]\n            });\n        }\n\n    }\n\n    resetField =(e)=>{\n            this.setState({\n                fx : '',\n                disabled: false,\n                showGraph: false\n            });\n        }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"bisection\").then(db=>{\n            this.setState({\n                fx : db.data.data.fx,\n                Xl : db.data.data.xl,\n                Xr : db.data.data.xr\n            })\n        })\n    }\n    \n    render() {\n        let { fx, Xl,Xr } = this.state;\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {<Card\n                            title = {<span style={{color:\"white\"}}>Bisection</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                            id=\"inputCard\"\n                        >\n                            <h2 style={{color:\"white\"}}>f(x)</h2><Input size=\"large\" name=\"fx\" value= {this.state.fx} style={InputStyle} disabled = {(this.state.disabled)? \"disabled\" : \"\"}></Input>\n                            <h2 style={{color:\"white\"}}>X<sub>L</sub></h2><Input size=\"large\" name=\"Xl\" value= {this.state.Xl}  style={InputStyle} ></Input>\n                            <h2 style={{color:\"white\"}}>X<sub>R</sub></h2><Input size=\"large\" name=\"Xr\" value= {this.state.Xr} style={InputStyle}></Input><br /><br />\n                            <Button id=\"submit_button\" onClick={\n                                () => this.bisection(parseFloat(Xl), parseFloat(Xr))\n                            }\n                                style={{ background: \"#4caf12\", color: \"white\" }}>Submit</Button>\n                            <Button id=\"submit_exam\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" , float:\"right\" }}>Example</Button>\n                            {this.state.disabled&&<Button onClick={this.resetField} style={{ background:\"red\",color:\"white\", marginLeft:\"1%\"}}>Reset</Button>}\n                        </Card>}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx} title=\"Bisection Method\"/>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Output</span>}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#001529\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            <Table columns={columns} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}></Table>\n                        </Card>\n                    }\n                </div>\n            </div>\n\n        );\n    }\n}\nexport default Bisection;\n","import React from 'react';\nimport {Input ,Card,Button,Table} from 'antd';\nimport {func} from '../../group_library/lib_use.js';\nimport Graph from '../../components/Graph'\nimport 'antd/dist/antd.css';\nimport '../../style/screen.css'\nimport api from '../../api'\n\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\nvar dataInTable = []\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"x\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"y\",\n        dataIndex: \"y\",\n        key: \"y\"\n    },\n];\n\nclass Graphical extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n          fx : \"\",\n          start : 0.0,\n          end : 0.0,\n            y: 0.0,\n          showOutputCard: false,\n            showGraph: false,\n            moveLeft: false,\n            showInputCard: true,\n             disabled: false \n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.graphical = this.graphical.bind(this);\n    }\n\n    handleChange(event) {\n      this.setState({[event.target.name]: event.target.value});\n    }\n\n\n    graphical(start,end){\n      var count = 0;\n        var data = []\n        data['x'] = []\n        data['y'] = []\n        for(var i = parseInt(this.state.start); i <= parseInt(this.state.end); i++){\n            data['x'][count] = i;\n            data['y'][count] = func(this.state.fx, i);\n            count++;\n        }\n        this.createTable(data['x'], data['y']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true,\n            showInputCard : false,\n            disabled: true\n        })\n    }\n\n    createTable(x, y) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                x: x[i],\n                y: y[i]\n            });\n        }\n\n    };\n\n    resetField =(e)=>{\n            this.setState({\n                fx : '',\n                disabled: false,\n                showGraph: false\n            });\n        }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"graphical\").then(db=>{\n            this.setState({\n                fx : db.data.data.fx,\n                start : db.data.data.xl,\n                end : db.data.data.xr\n            })\n        })\n    }\n    \n    render() {\n        let { fx, start, end } = this.state;\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {<Card\n                            title = {<span style={{color:\"white\"}}>Graphical</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                            id=\"inputCard\"\n                        >\n                            <h2 style={{color:\"white\"}}>f(x)</h2><Input size=\"large\" name=\"fx\" value= {this.state.fx} style={InputStyle} disabled = {(this.state.disabled)? \"disabled\" : \"\"}></Input>\n                            <h2 style={{color:\"white\"}}>Start</h2><Input size=\"large\" name=\"start\" value= {this.state.start} style={InputStyle} ></Input>\n                            <h2 style={{color:\"white\"}}>End</h2><Input size=\"large\" name=\"end\" value= {this.state.end} style={InputStyle}></Input><br /><br />\n                            <Button id=\"submit_button\" onClick={\n                                () => this.graphical(parseFloat(start), parseFloat(end))\n                            }\n                                style={{ background: \"#4caf12\", color: \"white\" }}>Submit</Button>\n                            <Button id=\"submit_exam\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" , float:\"right\" }}>Example</Button>\n                            {this.state.disabled&&<Button onClick={this.resetField} style={{ background:\"red\",color:\"white\", marginLeft:\"1%\"}}>Reset</Button>}\n                        </Card>}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx} title=\"Graphical Method\"/>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Output</span>}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#001529\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            <Table columns={columns} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}></Table>\n                        </Card>\n                    }\n                </div>\n            </div>\n\n        );\n    }\n}\nexport default Graphical;\n","import React from 'react';\nimport { Input ,Card,Button,Table} from 'antd';\nimport {func} from '../../group_library/lib_use.js';\nimport Graph from '../../components/Graph'\nimport 'antd/dist/antd.css';\nimport '../../style/screen.css'\nimport api from '../../api'\n\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\nvar dataInTable = []\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"XL\",\n        dataIndex: \"xl\",\n        key: \"xl\"\n    },\n    {\n        title: \"XR\",\n        dataIndex: \"xr\",\n        key: \"xr\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Error\",\n        key: \"error\",\n        dataIndex: \"error\"\n    }\n];\n\nclass False_position extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n          fx : \"\",\n          Xl : 0.0,\n          Xr : 0.0,\n          showOutputCard: false,\n            showGraph: false,\n            moveLeft: false,\n            showInputCard: true,\n             disabled: false \n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.false_position = this.false_position.bind(this);\n    }\n\n    handleChange(event) {\n      this.setState({[event.target.name]: event.target.value});\n    }\n\n\n    false_position(Xl,Xr){\n      var increaseFunction = false;\n      var error=parseFloat(999.000000);\n      var X1 = 0;\n      var count = 0;\n        var data = []\n        data['xl'] = []\n        data['xr'] = []\n        data['x'] = []\n        data['error'] = []\n        X1 = (Xl*func(this.state.fx,Xr) - Xr*func(this.state.fx,Xl))/(func(this.state.fx,Xr)-func(this.state.fx,Xl))\n        console.log(X1);\n        console.log(func(this.state.fx, X1))\n        if(func(this.state.fx, X1)<0.000001){\n            error= Math.abs(func(this.state.fx, X1))\n            data['xl'][count] = Xl;\n            data['xr'][count] = Xr;\n            data['x'][count] = X1.toFixed(8);\n            data['error'][count] = Math.abs(error).toFixed(8);\n        }\n        else  if (func(this.state.fx, X1) < 0) {\n            increaseFunction = true;\n            do{\n          X1 = (Xl*func(this.state.fx,Xr) - Xr*func(this.state.fx,Xl))/(func(this.state.fx,Xr)-func(this.state.fx,Xl))\n            if (func(this.state.fx, X1) * func(this.state.fx, Xr) < 0) {\n                error = error(X1, Xr);\n                if (increaseFunction) {\n                    Xl = X1;\n                }\n                else {\n                    Xr = X1;\n                }\n\n            }\n            else {\n                error = error(X1, Xl);\n                if (increaseFunction) {\n                    Xr = X1;\n                }\n                else {\n                    Xl = X1;\n                }\n\n            }\n            \n            data['xl'][count] = Xl;\n            data['xr'][count] = Xr;\n            data['x'][count] = X1.toFixed(8);\n            data['error'][count] = error.toFixed(8);\n            count++;\n          console.log(X1.toFixed(6));\n        }while(Math.abs(error)>0.000001)\n        }\n        //console.log((Xm.toString()).substring(0,8)) //change Float to String make number don't round up\n        //console.log(\"answer: \"+Xm)\n        this.createTable(data['xl'], data['xr'], data['x'], data['error']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true,\n            showInputCard : false,\n            disabled: true\n        })\n    }\n\n    createTable(xl, xr, x, error) {\n        dataInTable = []\n        for (var i = 0; i < xl.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                xl: xl[i],\n                xr: xr[i],\n                x: x[i],\n                error: error[i]\n            });\n        }\n\n    }\n\n    resetField =(e)=>{\n            this.setState({\n                fx : '',\n                disabled: false,\n                showGraph: false\n            });\n        }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"false position\").then(db=>{\n            this.setState({\n                fx : db.data.data.fx,\n                Xl : db.data.data.xl,\n                Xr : db.data.data.xr\n            })\n        })\n    }\n    \n    render() {\n        let { fx, Xl, Xr } = this.state;\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {<Card\n                            title = {<span style={{color:\"white\"}}>False position</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                            id=\"inputCard\"\n                        >\n                            <h2 style={{color:\"white\"}}>f(x)</h2><Input size=\"large\" name=\"fx\" value= {this.state.fx} style={InputStyle} disabled = {(this.state.disabled)? \"disabled\" : \"\"}></Input>\n                            <h2 style={{color:\"white\"}}>X<sub>L</sub></h2><Input size=\"large\" name=\"Xl\" value= {this.state.Xl} style={InputStyle} ></Input>\n                            <h2 style={{color:\"white\"}}>X<sub>R</sub></h2><Input size=\"large\" name=\"Xr\" value= {this.state.Xr} style={InputStyle}></Input><br /><br />\n                            <Button id=\"submit_button\" onClick={\n                                () => this.false_position(parseFloat(Xl), parseFloat(Xr))\n                            }\n                                style={{ background: \"#4caf12\", color: \"white\" }}>Submit</Button>\n                            <Button id=\"submit_exam\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" , float:\"right\" }}>Example</Button>\n                            {this.state.disabled&&<Button onClick={this.resetField} style={{ background:\"red\",color:\"white\", marginLeft:\"1%\"}}>Reset</Button>}\n                        </Card>}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx} title=\"False position Method\" />}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Output</span>}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#001529\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            <Table columns={columns} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}></Table>\n                        </Card>\n                    }\n                </div>\n            </div>\n\n        );\n    }\n}\nexport default False_position;\n","import React from 'react';\nimport {Input ,Card,Button,Table} from 'antd';\nimport {func} from '../../group_library/lib_use.js';\nimport Graph from '../../components/Graph'\nimport 'antd/dist/antd.css';\nimport '../../style/screen.css'\nimport api from '../../api'\n\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\nvar dataInTable = []\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Error\",\n        dataIndex: \"error\",\n        key: \"error\"\n    }\n];\n\nclass One_point_iteration extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n          fx : \"\",\n          Xpre : 0.0,\n          showOutputCard: false,\n            showGraph: false,\n            moveLeft: false,\n            showInputCard: true,\n             disabled: false \n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.one_point_iteration = this.one_point_iteration.bind(this);\n    }\n\n    handleChange(event) {\n      this.setState({[event.target.name]: event.target.value});\n    }\n\n\n    one_point_iteration(Xpre){\n      var X=0\n      var count = 0;\n        var data = []\n        data['x'] = []\n        data['error'] = []\n      while(true){\n          X = func(this.state.fx,Xpre)\n          data['x'][count] = Xpre;\n            data['error'][count] = Math.abs((X-Xpre)/X);\n            count++;\n            if(Xpre === X){\n                //console.log(X)\n                break;\n            }\n            else{\n                //console.log(X)\n                Xpre = X\n            }\n          //console.log(Xm.toFixed(6));\n        }\n        //console.log((Xm.toString()).substring(0,8)) //change Float to String make number don't round up\n        //console.log(\"answer: \"+Xm)\n        this.createTable(data['x'], data['error']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true,\n            showInputCard : false,\n            disabled: true\n        })\n    }\n\n    createTable(x,error) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                x: x[i],\n                error: error[i]\n            });\n        }\n\n    }\n\n    resetField =(e)=>{\n            this.setState({\n                fx : '',\n                disabled: false,\n                showGraph: false\n            });\n        }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"one point iteration\").then(db=>{\n            this.setState({\n                fx : db.data.data.fx,\n                Xpre : db.data.data.x,\n            })\n        })\n    }\n    \n    render() {\n        let { fx, Xpre } = this.state;\n        console.log(this.state.Xpre)\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {<Card\n                            title = {<span style={{color:\"white\"}}>One point iteration</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                            id=\"inputCard\"\n                        >\n                            <h2 style={{color:\"white\"}}>f(x)</h2><Input size=\"large\" name=\"fx\" value= {this.state.fx} style={InputStyle} disabled = {(this.state.disabled)? \"disabled\" : \"\"}></Input>\n                            <h2 style={{color:\"white\"}}>X</h2><Input size=\"large\" name=\"Xpre\" value= {this.state.Xpre} style={InputStyle} ></Input><br/><br/>\n                            <Button id=\"submit_button\" onClick={\n                                () => this.one_point_iteration(parseFloat(Xpre))\n                            }\n                                style={{ background: \"#4caf12\", color: \"white\" }}>Submit</Button>\n                            <Button id=\"submit_exam\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" , float:\"right\" }}>Example</Button>\n                            {this.state.disabled&&<Button onClick={this.resetField} style={{ background:\"red\",color:\"white\", marginLeft:\"1%\"}}>Reset</Button>}\n                        </Card>}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx} title=\"One point iteration Method\"/>}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Output</span>}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#001529\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            <Table columns={columns} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}></Table>\n                        </Card>\n                    }\n                </div>\n            </div>\n\n        );\n    }\n}\nexport default One_point_iteration;\n","import React from 'react';\nimport { Input ,Card,Button,Table} from 'antd';\nimport {func,funcDiff} from '../../group_library/lib_use.js';\nimport Graph from '../../components/Graph'\nimport 'antd/dist/antd.css';\nimport '../../style/screen.css'\nimport { derivative} from 'mathjs'\nimport api from '../../api'\n\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\nvar dataInTable = []\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Error\",\n        key: \"error\",\n        dataIndex: \"error\"\n    }\n];\n\nclass Newton_Raphson extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n          fx : \"\",\n          X : 0.0,\n          showOutputCard: false,\n            showGraph: false,\n            moveLeft: false,\n            showInputCard: true,\n             disabled: false \n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.newton_Raphson = this.newton_Raphson.bind(this);\n    }\n\n    handleChange(event) {\n      this.setState({[event.target.name]: event.target.value});\n    }\n\n\n    newton_Raphson(X){\n      var error=parseFloat(999.000000);\n      var Xnew =0;\n      var count = 0;\n        var data = []\n        data['x'] = []\n        data['error'] = []\n        //console.log(derivative('7-x^2', 'x').evaluate({x: 4}))\n        var use_fx = this.state.fx.split(\"=\")\n      do{\n          Xnew = X - (func(this.state.fx,X)/derivative(use_fx[1], 'x').evaluate({x: X}))\n          error = Math.abs((Xnew-X)/Xnew);\n        //   console.log(Xnew)\n        //   console.log(error)\n        console.log( X+\" - (\"+func(this.state.fx,X)+\"/\"+funcDiff(X)+\")\")\n            data['x'][count] = X.toFixed(8);\n            data['error'][count] = error.toFixed(8);\n            count++;\n            X=Xnew\n          //console.log(Xm.toFixed(6));\n        }while(error>0.000001)\n        //console.log((Xm.toString()).substring(0,8)) //change Float to String make number don't round up\n        //console.log(\"answer: \"+Xm)\n        this.createTable( data['x'], data['error']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true,\n            showInputCard : false,\n            disabled: true\n        })\n    }\n\n    createTable(x, error) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                x: x[i],\n                error: error[i]\n            });\n        }\n\n    }\n\n    resetField =(e)=>{\n            this.setState({\n                fx : '',\n                disabled: false,\n                showGraph: false\n            });\n        }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"newton raphson\").then(db=>{\n            this.setState({\n                fx : db.data.data.fx,\n                X : db.data.data.x,\n            })\n        })\n    }\n    \n    render() {\n        let { fx, X } = this.state;\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {<Card\n                            title = {<span style={{color:\"white\"}}>Newton Raphson</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                            id=\"inputCard\"\n                        >\n                            <h2 style={{color:\"white\"}}>f(x)</h2><Input size=\"large\" name=\"fx\" value= {this.state.fx} style={InputStyle} disabled = {(this.state.disabled)? \"disabled\" : \"\"}></Input>\n                            <h2 style={{color:\"white\"}}>X</h2><Input size=\"large\" name=\"X\"  value= {this.state.X} style={InputStyle} ></Input><br /><br />\n                            <Button id=\"submit_button\" onClick={\n                                () => this.newton_Raphson(parseFloat(X))\n                            }\n                                style={{ background: \"#4caf12\", color: \"white\" }}>Submit</Button>\n                            <Button id=\"submit_exam\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" , float:\"right\" }}>Example</Button>\n                            {this.state.disabled&&<Button onClick={this.resetField} style={{ background:\"red\",color:\"white\", marginLeft:\"1%\"}}>Reset</Button>}\n                        </Card>}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx} title=\"Newton Raphson Method\" />}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Output</span>}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#001529\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            <Table columns={columns} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}></Table>\n                        </Card>\n                    }\n                </div>\n            </div>\n\n        );\n    }\n}\nexport default Newton_Raphson;\n","import React from 'react';\nimport { Input ,Card,Button,Table} from 'antd';\nimport {func} from '../../group_library/lib_use.js';\nimport Graph from '../../components/Graph'\nimport 'antd/dist/antd.css';\nimport '../../style/screen.css'\nimport api from '../../api'\n\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\nvar dataInTable = []\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"x0\",\n        dataIndex: \"x0\",\n        key: \"x0\"\n    },\n    {\n        title: \"X1\",\n        dataIndex: \"x1\",\n        key: \"x1\"\n    },\n    {\n        title: \"Error\",\n        key: \"error\",\n        dataIndex: \"error\"\n    }\n];\n\nclass Secant extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n          fx : \"\",\n          X0 : 0.0,\n          X1 : 0.0,\n          showOutputCard: false,\n            showGraph: false,\n            moveLeft: false,\n            showInputCard: true,\n             disabled: false \n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.secant = this.secant.bind(this);\n    }\n\n    handleChange(event) {\n      this.setState({[event.target.name]: event.target.value});\n    }\n\n\n    secant(X0,X1){\n      var error=parseFloat(999.000000);\n      var Xnew=0;\n      var count = 0;\n        var data = []\n        data['x0'] = []\n        data['x1'] = []\n        data['error'] = []\n      do{\n          Xnew = X0-((func(this.state.fx,X0)*(X0-X1))/(func(this.state.fx,X0)-func(this.state.fx,X1)))\n          error = Math.abs((Xnew-X1)/Xnew)\n            data['x0'][count] = X0;\n            data['x1'][count] = X1;\n            data['error'][count] = error.toFixed(8);\n            count++;\n            X0 = X1\n            X1 = Xnew\n          //console.log(Xm.toFixed(6));\n        }while(error>0.000001)\n        //console.log((Xm.toString()).substring(0,8)) //change Float to String make number don't round up\n        //console.log(\"answer: \"+Xm)\n        this.createTable(data['x0'], data['x1'], data['error']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true,\n            showInputCard : false,\n            disabled: true\n        })\n    }\n\n    createTable(x0, x1,  error) {\n        dataInTable = []\n        for (var i = 0; i < x0.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                x0: x0[i],\n                x1: x1[i],\n                error: error[i]\n            });\n        }\n\n    }\n\n    resetField =(e)=>{\n            this.setState({\n                fx : '',\n                disabled: false,\n                showGraph: false\n            });\n        }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"secant\").then(db=>{\n            this.setState({\n                fx : db.data.data.fx,\n                X0 : db.data.data.xl,\n                X1 : db.data.data.xr\n            })\n        })\n    }\n    \n    render() {\n        let { fx, X0, X1 } = this.state;\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {<Card\n                            title = {<span style={{color:\"white\"}}>Secant</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                            id=\"inputCard\"\n                        >\n                            <h2 style={{color:\"white\"}}>f(x)</h2><Input size=\"large\" name=\"fx\" value= {this.state.fx} style={InputStyle} disabled = {(this.state.disabled)? \"disabled\" : \"\"}></Input>\n                            <h2 style={{color:\"white\"}}>X<sub>0</sub></h2><Input size=\"large\" name=\"X0\" value= {this.state.X0} style={InputStyle} ></Input>\n                            <h2 style={{color:\"white\"}}>X<sub>1</sub></h2><Input size=\"large\" name=\"X1\" value= {this.state.X1} style={InputStyle}></Input><br /><br />\n                            <Button id=\"submit_button\" onClick={\n                                () => this.secant(parseFloat(X0), parseFloat(X1))\n                            }\n                                style={{ background: \"#4caf12\", color: \"white\" }}>Submit</Button>\n                            <Button id=\"submit_exam\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" , float:\"right\" }}>Example</Button>\n                            {this.state.disabled&&<Button onClick={this.resetField} style={{ background:\"red\",color:\"white\", marginLeft:\"1%\"}}>Reset</Button>}\n                        </Card>}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx} title=\"Secant Method\" />}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Output</span>}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#001529\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            <Table columns={columns} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}></Table>\n                        </Card>\n                    }\n                </div>\n            </div>\n\n        );\n    }\n}\nexport default Secant;\n","import React, { Component } from 'react'\nimport { Card, Input, Button } from 'antd';\nimport { det } from 'mathjs';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\n\n\nvar A = [], B = [], answer = [], matrixA = [], matrixB = []\nclass Cramer extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            row: parseInt(0),\n            column: parseInt(0),\n            a_value: [],\n            b_value: [],\n            showDimentionForm: true,\n            showMatrixForm: false,\n            showOutputCard: false,\n            CallExam : false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.cramer = this.cramer.bind(this);\n\n    }\n\n    cramer() {\n        this.initMatrix();\n        var counter = 0;\n        \n\n        while (counter !== this.state.row) {\n            var transformMatrix = JSON.parse(JSON.stringify(A)); //Deep copy\n            for (var i = 0; i < this.state.row; i++) {\n                for (var j = 0; j < this.state.column; j++) {\n                    if (j === counter) {\n                        transformMatrix[i][j] = B[i]\n                        break;\n                    }\n\n                }\n\n            }\n            counter++;\n            answer.push(<h2>X<sub>{counter}</sub>=&nbsp;&nbsp;{Math.round(det(transformMatrix)) / Math.round(det(A))}</h2>)\n            answer.push(<br />)\n\n        }\n        this.setState({\n            showOutputCard: true\n        });\n\n    }\n\n    createMatrix(row, column) {\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(<Input style={{\n                    width: \"14%\",\n                    height: \"50%\",\n                    backgroundColor: \"white\",\n                    marginInlineEnd: \"5%\",\n                    marginBlockEnd: \"5%\",\n                    color: \"black\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }}\n                    id={\"a\" + i + \"\" + j} key={\"a\" + i + \"\" + j} placeholder={(this.state.CallExam)? this.state.a_value[i-1][j-1]:(\"a\"+(i)+\"\"+(j))}/>)\n            }\n            matrixA.push(<br />)\n            matrixB.push(<Input style={{\n                width: \"14%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"b\" + i} key={\"b\" + i} placeholder={(this.state.CallExam)? this.state.b_value[i-1]:(\"b\"+(i))}/>)\n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n\n    }\n\n    initMatrix() {\n        for (var i = 0; i < this.state.row; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.column; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n        }\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"cholesky decomposition\").then(db=>{\n            this.setState({\n                row : db.data.data.row,\n                column : db.data.data.column,\n                a_value : db.data.data.A,\n                b_value : db.data.data.B,\n                CallExam : true\n            })\n        })\n    }\n\n    render() {\n        let { row, column } = this.state;\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Cramer's Rule</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n\n                            {this.state.showDimentionForm &&\n                                <div>\n                                    <h4 style={{color:\"white\"}}>Row</h4><Input size=\"large\" name=\"row\" value={this.state.row} style={InputStyle}></Input>\n                                    <h4 style={{color:\"white\"}}>Column</h4><Input size=\"large\" name=\"column\" value={this.state.column} style={InputStyle}></Input><br /><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => this.createMatrix(row, column)\n                                    }\n                                        style={{ background: \"#4caf12\", color: \"white\",float:\"right\" }}>\n                                        Submit\n                                    </Button>\n                                </div>\n                            }\n                            {this.state.showMatrixForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Matrix [A]</h2><br />{matrixA}\n                                    <h2 style={{color:\"white\"}}>Vector [B]<br /></h2>{matrixB}<br/>\n                                    <Button\n                                        size=\"large\"\n                                        id=\"matrix_button\"\n                                        style={{ background: \"#4caf12\", color: \"white\" ,float:\"right\"}}\n                                        onClick={() => this.cramer()}>\n                                        Submit\n                                </Button>\n                                </div>\n                            }\n\n\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ width: \"100%\", background: \"white\", color: \"#001529\", float: \"left\" }}\n                                onChange={this.handleChange}>\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{answer}</p>\n                            </Card>\n                        }\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\nexport default Cramer;\n\n\n\n\n","import React, { Component } from 'react'\nimport { Card, Input, Button } from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\n\nvar A = [], B = [], matrixA = [], matrixB = [], output = []\nclass Jordan extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            a_value: [],\n            b_value: [],\n            showDimentionForm: true,\n            showMatrixForm: false,\n            showOutputCard: false,\n            CallExam: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.jordan = this.jordan.bind(this);\n\n    }\n\n    jordan(n) {\n        this.initMatrix();\n        if (A[0][0] === 0) { //pivoting\n            var tempRow = JSON.parse(JSON.stringify(A[0]));\n            var tempColumn = B[0];\n            A[0] = A[1];\n            A[1] = tempRow;\n            B[0] = B[1];\n            B[1] = tempColumn;\n        }\n        //Forward eliminate\n        for (var k = 0; k < n; k++) {\n            for (var i = k + 1; i < n; i++) {\n                var factor = A[i][k] / A[k][k];\n                for (var j = k; j < n; j++) {\n                    A[i][j] = A[i][j] - factor * A[k][j];\n                }\n                B[i] = B[i] - factor * B[k];\n\n            }\n        }\n        //Backward Substitution\n        for (k = n - 1; k >= 0; k--) {\n            for (i = k; i >= 0; i--) {\n\n                if (i === k) {//Identity matrix\n                    factor = 1 / A[i][k];\n\n                    for (j = 0; j < n; j++) {\n                        A[i][j] = A[i][j] * factor;\n                    }\n                    B[i] = B[i] * factor;\n\n\n                }\n                else {\n                    factor = A[i][k] / A[k][k];\n                    for (j = 0; j < n; j++) {\n                        A[i][j] = A[i][j] - factor * A[k][j];\n                    }\n                    B[i] = B[i] - factor * B[k];\n                }\n            }\n        }\n        for (i = 0; i < n; i++) {\n            output.push(B[i]);\n            output.push(<br />)\n        }\n        this.setState({\n            showOutputCard: true\n        });\n\n\n    }\n    createMatrix(row, column) {\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\",\n                    backgroundColor: \"white\",\n                    marginInlineEnd: \"5%\",\n                    marginBlockEnd: \"5%\",\n                    color: \"black\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }}\n                    id={\"a\" + i + \"\" + j} key={\"a\" + i + \"\" + j} placeholder={(this.state.CallExam)? this.state.a_value[i-1][j-1] :(\"a\" + i + \"\" + j)} />)\n            }\n            matrixA.push(<br />)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\",\n                backgroundColor: \"white\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"b\" + i} key={\"b\" + i} placeholder={(this.state.CallExam)? this.state.b_value[i-1] :\"b\" + i} />)\n\n\n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n\n    }\n    initMatrix() {\n        for (var i = 0; i < this.state.row; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.column; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n        }\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"gauss-jordan\").then(db=>{\n            this.setState({\n                row : db.data.data.row,\n                column : db.data.data.column,\n                a_value : db.data.data.A,\n                b_value : db.data.data.B,\n                CallExam : true\n            })\n        })\n    }\n\n    render() {\n        let { row, column } = this.state;\n        return (\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Gauss-Jordan</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n\n                            {this.state.showDimentionForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Row</h2><Input size=\"large\" name=\"row\" value={this.state.row} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>Column</h2><Input size=\"large\" name=\"column\" value={this.state.column} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => this.createMatrix(row, column)\n                                    }\n                                        style={{ background: \"#4caf12\", color: \"white\", float:\"right\" }}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n\n                            {this.state.showMatrixForm &&\n                                <div>\n                                    <h2 style={{color:\"white\"}}>Matrix [A]</h2><br />{matrixA}\n                                    <h2 style={{color:\"white\"}}>Vector [B]<br /></h2>{matrixB}\n                                    \n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"#4caf12\", color: \"white\", float:\"right\" }}\n                                        onClick={() => this.jordan(row)}>\n                                        Submit\n                                    </Button>\n                                </div>\n                            }\n\n                        </Card>\n\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={<p style={{color:\"#001529\"}}>Output</p>}\n                                bordered={true}\n                                style={{ width: \"100%\", color: \"#001529\", background: \"#FFFFFFFF\", float: \"left\" }}\n                                onChange={this.handleChange} id=\"answerCard\">\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{output}</p>\n                            </Card>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Jordan;\n\n\n\n","import React, { Component } from 'react'\nimport {Card, Input, Button} from 'antd';\nimport '../../style/screen.css'\nimport 'antd/dist/antd.css';\nimport { format } from 'mathjs';\nimport api from '../../api'\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"#001529\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\",\n\n};\n\nvar A = [], B = [], matrixA = [], matrixB = [], output = []\nclass Cholesky extends Component {\n    \n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            a_value: [],\n            b_value: [],\n            showDimentionForm : true,\n            showMatrixForm: false,\n            showOutputCard: false,\n            CallExam : false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.cholesky = this.cholesky.bind(this)\n    \n    }\n\n    cholesky(n) {\n        this.initMatrix();\n        var  x  = new Array(n);\n        var  y  = new Array(n)\n        if (matrixA[0][0] === 0) {\n            for (var i=0 ; i<n ; i++) {\n                var temp = A[0][i];\n                matrixA[0][i] = B[i][i];\n                matrixB[0][i] = temp;\n            }\n        }\n        var matrixL = new Array(n);\n        for(i=0;i<n;i++){\n            matrixL[i]  = new Array(n); \n            for(var j=0;j<n;j++){\n                matrixL[i][j] = 0;\n            }\n            x[i] = 0;\n            y[i] = 0;\n        }\n        matrixL[0][0] = Math.sqrt(matrixA[0][0]);\n        for(var k=1;k<n;k++){\n\n            for(i=0;i<k;i++){\n                var sum = 0;\n                if(i!==0){\n                    for(j=0;j<i;j++){\n                        sum += matrixL[i][j]*matrixL[k][j];\n                        //console.log(sum);\n                    }\n                }\n                matrixL[k][i]= (matrixA[i][k]-sum)/matrixL[i][i];//ได้ค่า L ที่ไม่ใช่แนวทะแยง\n            }\n            sum = 0;\n            for(j=0;j<k;j++){\n                sum += matrixL[k][j]*matrixL[k][j];\n            }\n            matrixL[k][k] = Math.sqrt(matrixA[k][k]-sum);\n        }\n     ;\n        y[0] = matrixB[0]/matrixL[0][0];\n        for(i=1;i<n;i++){\n            sum = 0;\n            for(j=0;j<i;j++){\n                sum += matrixL[i][j]*y[j];\n            }\n            y[i] = (matrixB[i]-sum)/matrixL[i][i];\n        }\n   \n        x[n-1] = y[n-1]/matrixL[n-1][n-1];\n        for(i=this.state.row-2;i>=0;i--){\n            sum = 0;\n            for(j=i+1;j<this.state.row;j++){\n                sum += matrixL[j][i]*x[j];\n            }\n            x[i] = (y[i]-sum)/matrixL[i][i];\n        }\n\n        this.setState({\n            showOutputCard: true\n        });\n    }\n    summation(L, k) {\n        var sum = 0\n        for (var i=0 ; i<parseInt(this.state.row) ; i++) {\n            for (var j=0 ; j<i-2 ; j++) {\n                sum+= L[i][j]*L[k][j]\n            }\n        }\n        return sum\n    }\n    printFraction (value) {\n        return format(value, { fraction: 'ratio' })\n    }\n\n    createMatrix(row, column) {\n        for (var i=0 ; i<row ; i++) {\n            for (var j=0 ; j<column ; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\", \n                    backgroundColor:\"white\", \n                    marginInlineEnd: \"5%\", \n                    marginBlockEnd: \"5%\",\n                    color: \"black\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }} \n                id={\"a\"+(i+1)+\"\"+(j+1)} key={\"a\"+(i+1)+\"\"+(j+1)} placeholder={(this.state.CallExam)? this.state.a_value[i][j]:(\"a\"+(i+1)+\"\"+(j+1))}/>)  \n            }\n            matrixA.push(<br/>)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\", \n                backgroundColor:\"white\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"black\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }} \n            id={\"b\"+(i+1)} key={\"b\"+(i+1)} placeholder={(this.state.CallExam)? this.state.b_value[i]:(\"b\"+(i+1))}/>)\n                \n            \n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n        \n\n    }\n    initMatrix() {\n        for(var i=0 ; i<this.state.row ; i++) {\n            A[i] = []\n            for(var j=0 ; j<this.state.column ; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\"+(i+1)+\"\"+(j+1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\"+(i+1)).value));\n        }\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    getExam=(e)=>{\n        api.getExamByMethod(\"cholesky decomposition\").then(db=>{\n            this.setState({\n                row : db.data.data.row,\n                column : db.data.data.column,\n                a_value : db.data.data.A,\n                b_value : db.data.data.B,\n                CallExam : true\n            })\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"calBody\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            title = {<span style={{color:\"white\"}}>Cholesky Decomposition</span>}\n                            bordered={true}\n                            style={{ background: \"#001529\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            \n                            \n                            {this.state.showDimentionForm && \n                                <div>\n                                    <h2 style={{color:\"white\"}}>Row</h2><Input size=\"large\" name=\"row\" value={this.state.row} style={InputStyle}></Input>\n                                    <h2 style={{color:\"white\"}}>Column</h2><Input size=\"large\" name=\"column\" value={this.state.column} style={InputStyle}></Input><br/><br/>\n                                    <Button id=\"submit_examInput\" onClick={this.getExam} style={{ background: \"white\", color: \"#001529\" ,float:\"left\"}}>Example</Button>\n                                    <Button id=\"dimention_button\" onClick= {\n                                        ()=>this.createMatrix(this.state.row, this.state.column)\n                                        }  \n                                        style={{background: \"#4caf12\", color: \"white\", float:\"right\"}}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div> \n                            }\n                            \n                            {this.state.showMatrixForm && \n                                <div>\n                                    <h2 style={{color:\"white\"}}>Matrix [A]</h2><br/>{matrixA}\n                                    <h2 style={{color:\"white\"}}>Vector [B]<br/></h2>{matrixB}\n                                    <Button \n                                        id=\"matrix_button\"  \n                                        style={{background: \"#4caf12\", color: \"black\", float:\"right\"}}\n                                        onClick={()=>this.cholesky(this.state.row)}>\n                                        Submit\n                                    </Button>\n                                </div>\n                            }\n                        \n                            \n                        </Card>                        \n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                            title={\"Output\"}\n                            bordered={true}\n                            style={{ background: \"#3d683d\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}  id=\"answerCard\">\n                                <p style={{fontSize: \"24px\", fontWeight: \"bold\"}}>{output}</p>\n                            </Card>\n                        }   \n                    </div>\n                </div>     \n            </div>\n        );\n    }\n}\nexport default Cholesky;\n\n\n\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport { Layout, Menu } from 'antd';\nimport 'antd/dist/antd.css';\nimport { Drawer, Space } from 'antd';\nimport './style/screen.css'\nimport { BarsOutlined } from '@ant-design/icons';\n\nimport Bisection from './pages/Root of Equation/Bisection';\nimport Graphical from './pages/Root of Equation/Graphical';\nimport False_position from './pages/Root of Equation/False_position';\nimport One_point_iteration from './pages/Root of Equation/One_point_iteration';\nimport Newton_Raphson from './pages/Root of Equation/Newton_Raphson';\nimport Secant from './pages/Root of Equation/Secant';\n\nimport Cramer from './pages/Linear Algebra/Cramer';\nimport Gauss from './pages/Linear Algebra/Gauss';\nimport Jordan from './pages/Linear Algebra/Jordan';\nimport Inverse from './pages/Linear Algebra/Inverse';\nimport LU from './pages/Linear Algebra/LU';\nimport Cholesky from './pages/Linear Algebra/Cholesky';\nimport Jacobi from './pages/Linear Algebra/Jacobi';\nimport Seidel from './pages/Linear Algebra/Seidel';\nimport Gradient from './pages/Linear Algebra/Gradient';\n\nimport NewtonInterpolate from './pages/Interpolation/Newton';\nimport Lagrange from './pages/Interpolation/Lagrange';\nimport Spline from './pages/Interpolation/Spline';\n\nimport Linear from './pages/Regression/Linear';\nimport Polynomial from './pages/Regression/Polynomial';\nimport MultipleLinear from './pages/Regression/MultipleLinear';\n\nconst { SubMenu } = Menu;\nconst { Header, Content,Sider } = Layout;\n\nclass Routes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      visible: false, \n      placement: 'left'\n    };\n  }\n\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n\n  onChange = e => {\n    this.setState({\n      placement: e.target.value,\n    });\n  };\n\n  render() {\n    const { placement, visible} = this.state;\n    \n    return (\n      <>\n      <Router>\n        <Layout style={{background:\"#fff\"}}>\n          <Header className=\"hideOnDesktop\" style={{ position: 'fixed', zIndex: 1, width: '100%' ,padding:'0 16px'}}>\n            <Space>\n              <BarsOutlined style={{color:'white',fontSize:'20px'}} onClick={this.showDrawer}/>\n              <span style={{color: 'white',marginLeft:'10px',fontSize:'20px'}}>Numerical method</span>\n            </Space>\n          </Header>\n          <Header className=\"hideOnMobile\" style={{ position: 'fixed', zIndex: 1, width: '100%' ,padding:'0 16px'}}>\n            <h2 style={{color: 'white',marginLeft:'10px'}}>Numerical method</h2>\n          </Header>\n          <Layout>\n            \n        <Drawer\n          title=\"Numerical method\"\n          placement=\"left\"\n          closable={true}\n          onClose={this.onClose}\n          visible={visible}\n          key={placement}\n          className=\"hideOnDesktop\"\n          footer=\"Arzeezar Lording\"\n        >\n          <Menu\n              mode =\"inline\"\n              defaultSelectedKeys={['menu_graphical']}\n              defaultOpenKeys={['root_submenu']}\n              >\n                <SubMenu key=\"root_submenu\" title={<span>Root of Equation</span>}>\n                  <Menu.Item key=\"menu_graphical\" ><Link to=\"/\">Graphical</Link></Menu.Item>\n                  <Menu.Item key=\"menu_bisection\" ><Link to=\"/bisection\">Bisection</Link></Menu.Item>\n                  <Menu.Item key=\"menu_false\"><Link to=\"/false_position\">False Position</Link></Menu.Item>\n                  <Menu.Item key=\"menu_onepoint\"><Link to=\"/one_point_iteration\">One-Point Iteration</Link></Menu.Item>\n                  <Menu.Item key=\"menu_newton\"><Link to=\"/newton_Raphson\">Newton-Raphson</Link></Menu.Item>\n                  <Menu.Item key=\"menu_secant\"><Link to=\"/secant\">Secant Method</Link></Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"algebra_submenu\" title={<span>Linear Algebra</span>}>\n                  <Menu.Item key=\"menu_cramer\"><Link to=\"/cramer\">Cramer's Rule</Link></Menu.Item>\n                  <Menu.Item key=\"menu_gauss\"><Link to=\"/gauss\">Gauss's Elimination</Link></Menu.Item>\n                  <Menu.Item key=\"menu_jordan\"><Link to=\"/jordan\">Gauss Jordan Method</Link></Menu.Item>\n                  <Menu.Item key=\"menu_inverse\"><Link to=\"/inverse\">Matrix Inversion</Link></Menu.Item>\n                  <Menu.Item key=\"menu_lu\"><Link to=\"/lu\">LU Decomposition</Link></Menu.Item>\n                  <Menu.Item key=\"menu_cholesky\"><Link to=\"/cholesky\">Cholesky Decomposition</Link></Menu.Item>\n                  <Menu.Item key=\"menu_jacobi\"><Link to=\"/jacobi\">Jacobi Iteration Method</Link></Menu.Item>\n                  <Menu.Item key=\"menu_seidel\"><Link to=\"/seidel\">Gauss Seidel Iteration</Link></Menu.Item>\n                  <Menu.Item key=\"menu_gradient\"><Link to=\"/conjugate-gradient\">Conjugate Gradient Method</Link></Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"interpolate_submenu\" title={<span>Interpolation</span>}>\n                  <Menu.Item key=\"menu_divide\"><Link to=\"/newton\">Newton Divide Difference</Link></Menu.Item>\n                  <Menu.Item key=\"menu_lagrange\"><Link to=\"/lagrange\">Lagrange</Link></Menu.Item>\n                  <Menu.Item key=\"menu_spline\"><Link to=\"/spline\">Spline</Link></Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"regression_submenu\" title={<span>Least Squares Regression</span>}>\n                  <Menu.Item key=\"menu_linear\"><Link to=\"/linear\">Linear Regression</Link></Menu.Item>\n                  <Menu.Item key=\"menu_poly\"><Link to=\"/polynomial\">Polynomial Regression</Link></Menu.Item>\n                  <Menu.Item key=\"menu_multiple\"><Link to=\"/multiple-linear\">Multiple Linear Regression</Link></Menu.Item>\n                </SubMenu>\n              </Menu>\n        </Drawer>\n        <Sider\n        width={335}\n          breakpoint=\"lg\"\n          collapsedWidth=\"0\"\n          className=\"hideOnMobile\"\n          style={{background:'white', height: \"100vh\"}}\n        >\n          <Menu\n              mode =\"inline\"\n                style={{height: '100vh', borderRight: 0, backgroundColor: \"white\", overflowY: \"scroll\",marginTop:'60px'}}\n                defaultSelectedKeys={['menu_graphical']}\n              defaultOpenKeys={['root_submenu']}\n              >\n                <SubMenu key=\"root_submenu\" title={<span>Root of Equation</span>}>\n                  <Menu.Item key=\"menu_graphical\" ><Link to=\"/\">Graphical</Link></Menu.Item>\n                  <Menu.Item key=\"menu_bisection\" ><Link to=\"/bisection\">Bisection</Link></Menu.Item>\n                  <Menu.Item key=\"menu_false\"><Link to=\"/false_position\">False Position</Link></Menu.Item>\n                  <Menu.Item key=\"menu_onepoint\"><Link to=\"/one_point_iteration\">One-Point Iteration</Link></Menu.Item>\n                  <Menu.Item key=\"menu_newton\"><Link to=\"/newton_Raphson\">Newton-Raphson</Link></Menu.Item>\n                  <Menu.Item key=\"menu_secant\"><Link to=\"/secant\">Secant Method</Link></Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"algebra_submenu\" title={<span>Linear Algebra</span>}>\n                  <Menu.Item key=\"menu_cramer\"><Link to=\"/cramer\">Cramer's Rule</Link></Menu.Item>\n                  <Menu.Item key=\"menu_gauss\"><Link to=\"/gauss\">Gauss's Elimination</Link></Menu.Item>\n                  <Menu.Item key=\"menu_jordan\"><Link to=\"/jordan\">Gauss Jordan Method</Link></Menu.Item>\n                  <Menu.Item key=\"menu_inverse\"><Link to=\"/inverse\">Matrix Inversion</Link></Menu.Item>\n                  <Menu.Item key=\"menu_lu\"><Link to=\"/lu\">LU Decomposition</Link></Menu.Item>\n                  <Menu.Item key=\"menu_cholesky\"><Link to=\"/cholesky\">Cholesky Decomposition</Link></Menu.Item>\n                  <Menu.Item key=\"menu_jacobi\"><Link to=\"/jacobi\">Jacobi Iteration Method</Link></Menu.Item>\n                  <Menu.Item key=\"menu_seidel\"><Link to=\"/seidel\">Gauss Seidel Iteration</Link></Menu.Item>\n                  <Menu.Item key=\"menu_gradient\"><Link to=\"/conjugate-gradient\">Conjugate Gradient Method</Link></Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"interpolate_submenu\" title={<span>Interpolation</span>}>\n                  <Menu.Item key=\"menu_divide\"><Link to=\"/newton\">Newton Divide Difference</Link></Menu.Item>\n                  <Menu.Item key=\"menu_lagrange\"><Link to=\"/lagrange\">Lagrange</Link></Menu.Item>\n                  <Menu.Item key=\"menu_spline\"><Link to=\"/spline\">Spline</Link></Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"regression_submenu\" title={<span>Least Squares Regression</span>}>\n                  <Menu.Item key=\"menu_linear\"><Link to=\"/linear\">Linear Regression</Link></Menu.Item>\n                  <Menu.Item key=\"menu_poly\"><Link to=\"/polynomial\">Polynomial Regression</Link></Menu.Item>\n                  <Menu.Item key=\"menu_multiple\"><Link to=\"/multiple-linear\">Multiple Linear Regression</Link></Menu.Item>\n                </SubMenu>\n              </Menu>\n        </Sider>\n        <Layout style={{ padding: '0 24px 24px' }}>\n              <Content style={{ padding: 24, margin: 0, minHeight: 280, }}>\n                <Switch>\n                  {/* Root of Equation */}\n                  <Route exact path=\"/\" component={Graphical} />\n                  <Route exact path=\"/bisection\" component={Bisection} />\n                  <Route exact path=\"/false_position\" component={False_position} />\n                  <Route exact path=\"/one_point_iteration\" component={One_point_iteration} />\n                  <Route exact path=\"/newton_Raphson\" component={Newton_Raphson} />\n                  <Route exact path=\"/secant\" component={Secant} />\n                  {/* Linear Algebra */}\n                  <Route exact path=\"/cramer\" component={Cramer} />\n                  <Route exact path=\"/gauss\" component={Gauss} />\n                  <Route exact path=\"/jordan\" component={Jordan} />\n                  <Route exact path=\"/inverse\" component={Inverse} />\n                  <Route exact path=\"/lu\" component={LU} />\n                  <Route exact path=\"/cholesky\" component={Cholesky} />\n                  <Route exact path=\"/jacobi\" component={Jacobi} />\n                  <Route exact path=\"/seidel\" component={Seidel} />\n                  <Route exact path=\"/conjugate-gradient\" component={Gradient} />\n                  {/* Interpolation */}\n                  <Route exact path=\"/newton\" component={NewtonInterpolate} />\n                  <Route exact path=\"/lagrange\" component={Lagrange} />\n                  <Route exact path=\"/spline\" component={Spline} />\n                  {/* Regression */}\n                  <Route exact path=\"/linear\" component={Linear} />\n                  <Route exact path=\"/polynomial\" component={Polynomial} />\n                  <Route exact path=\"/multiple-linear\" component={MultipleLinear} />\n                </Switch>\n              </Content>\n            </Layout>\n          </Layout>\n         \n        </Layout>\n      </Router>\n      </>\n    );\n  }\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\n\nReactDOM.render(<React.StrictMode>\n    <App/>\n  </React.StrictMode>, document.getElementById('root'));\n"],"sourceRoot":""}